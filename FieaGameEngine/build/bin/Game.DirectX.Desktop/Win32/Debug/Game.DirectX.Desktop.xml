<?xml version="1.0"?>
<doc>
    <assembly>
        "Game.DirectX.Desktop"
    </assembly>
    <members>
        <member name="F:FieaGameEngine.JsonScopeHelper._stackContext">
            <summary>
When the helper determines that the data in processing is of type scope we add it to the Stack.
This will be used later to traverse which layer (context) of the scope we are working in.
</summary>
        </member>
        <member name="M:FieaGameEngine.JsonScopeHelper.Create">
            <summary>
Creates a heap allocated JsonScopeHelper and returns its address.
HelperData associated with this JsonScopeHelper will be empty regardless if the calling JsonScopeHelpers HelperData has de-serialized content.
</summary>
            <returns>Returns the address of a newly created IJsonParseHelper.</returns>
        </member>
        <member name="M:FieaGameEngine.JsonScopeHelper.EndHandler(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Ends handling a Json key value pair for de-serialization.
</summary>
            <param name="key">The "key" associated with the Json value</param>
            <param name="value">The "Json" value to be de-serialized</param>
            <returns>
True if it can correctly end handling the de-serialization of the content passed
False if it can't correctly end handling the de-serialization of the content passed
</returns>
        </member>
        <member name="M:FieaGameEngine.JsonScopeHelper.StartHandler(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Starts handling a Json key value pair for de-serialization.
</summary>
            <param name="key">The "key" associated with the Json value</param>
            <param name="value">The "Json" value to be de-serialized</param>
            <returns>
True if it can correctly start handling the de-serialization of the content passed
False if it can't correctly start handling the de-serialization of the content passed
</returns>
        </member>
        <member name="M:FieaGameEngine.JsonScopeHelper.Initialize">
            <summary>
Resets the contents of this helper
</summary>
        </member>
        <member name="T:FieaGameEngine.JsonScopeHelper.Context">
            <summary>
Type of struct used
When the handler confirms that the object being passed in is of type scope it then adds 
</summary>
        </member>
        <member name="M:FieaGameEngine.JsonScopeHelper.GetDataClass">
            <summary>
Used for external use to view the DataClass which stores the de-serialized content.
</summary>
            <returns />
            <summary>
Used for internal use in the program to access the DataClass which stores the de-serialized content.
</summary>
        </member>
        <member name="M:FieaGameEngine.JsonScopeHelper.HandleScopeDatum(Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
De-serializes Json content into a Scope for Internal use
</summary>
            <param name="jsonValue">Json value to deserialize into a Scope</param>
        </member>
        <member name="M:FieaGameEngine.JsonScopeHelper.HandleMatrixDatum(Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
De-serializes Json content into an Matrix Datum for Internal use
</summary>
            <param name="jsonValue">Json value to deserialize into an Matrix Datum</param>
        </member>
        <member name="M:FieaGameEngine.JsonScopeHelper.HandleVectorDatum(Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
De-serializes Json content into an Vector Datum for Internal use
</summary>
            <param name="jsonValue">Json value to deserialize into an Vector Datum</param>
        </member>
        <member name="M:FieaGameEngine.JsonScopeHelper.HandleStringDatum(Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
De-serializes Json content into an String Datum for Internal use
</summary>
            <param name="jsonValue">Json value to deserialize into an String Datum</param>
        </member>
        <member name="M:FieaGameEngine.JsonScopeHelper.HandleFloatDatum(Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
De-serializes Json content into an Float Datum for Internal use
</summary>
            <param name="jsonValue">Json value to deserialize into an Float Datum</param>
        </member>
        <member name="M:FieaGameEngine.JsonScopeHelper.HandleIntegerDatum(Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
De-serializes Json content into an Integer Datum for Internal use
</summary>
            <param name="jsonValue">Json value to deserialize into an Integer Datum</param>
        </member>
        <member name="M:FieaGameEngine.JsonScopeHelper.#ctor">
            <summary>
Default constructor.
Binds a HelperData object that this helper can de-serialize content into.
</summary>
        </member>
        <member name="M:FieaGameEngine.JsonScopeHelper.Data.Clear">
            <summary>
Clears the contents stored in the this Data class
</summary>
        </member>
        <member name="M:FieaGameEngine.JsonScopeHelper.Data.GetData">
            <summary>
Retrieved a reference to the scope stored within the class
</summary>
            <returns>A mutable pointer to a Scope Object</returns>
        </member>
        <member name="T:FieaGameEngine.JsonScopeHelper.Data">
            <summary>
valid Json string is de-serialized into a scope within this Data class. 
</summary>
        </member>
        <member name="F:FieaGameEngine.IJsonCoordinator._myHelperData">
            <summary>
When the a helper signifies that it can handle the data this pointer will point to that helpers data.
This allows for the coordinator to have access to the data.
Once the process is finished then this pointer will be set to nullptr breaking the connection to the helpers data.
</summary>
        </member>
        <member name="F:FieaGameEngine.IJsonCoordinator._myHelpers">
            <summary>
Holds pointers to the helpers that the coordinator has access to.
These helpers are created by the user and become the responsibility of the coordinator to delete.
</summary>
        </member>
        <member name="M:FieaGameEngine.IJsonCoordinator.#ctor(FieaGameEngine.IJsonCoordinator*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Used with the publicly accessible clone method.
</summary>
            <param name="rhs" />
        </member>
        <member name="M:FieaGameEngine.IJsonCoordinator.NumberOfHelpers">
            <summary>
Returns the number of helpers that the coordinator manages.
</summary>
            <returns>The number of helpers managed by the coordinator</returns>
        </member>
        <member name="M:FieaGameEngine.IJsonCoordinator.Clone">
            <summary>
Will create a copy of the current coordinator on the heap.
</summary>
            <returns>
Returns a copy of a coordinator that was created on the heap.
</returns>
        </member>
        <member name="M:FieaGameEngine.IJsonCoordinator.Dispose">
            <summary>
Used in FindHelper
First: Used to hold a pointer to a parse helper that is in the helpers vector.
Second: Used to hold an index to a parse helper that is in the helpers vector
</summary>
        </member>
        <member name="M:FieaGameEngine.IJsonParseHelper.Create">
            <summary>
Used internally
</summary>
        </member>
        <member name="M:FieaGameEngine.IJsonParseHelper.EndHandler(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Called by a derived ParseHelper and will attempt to end the handling of the key and value and may de-serialize it depending on helper implementation.
</summary>
        </member>
        <member name="M:FieaGameEngine.IJsonParseHelper.StartHandler(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Called by a derived ParseHelper and will attempt to start handling the key and value and may de-serialize it depending on helper implementation.
</summary>
        </member>
        <member name="M:FieaGameEngine.IJsonParseHelper.Initialize">
            <summary>
Clears the contents of the data in the helper.
</summary>
        </member>
        <member name="M:FieaGameEngine.IJsonParseHelper.GetDataClass">
            <summary>
Returns a pointer to a const HelperData class that contains the de-serialized data.
This can be called by the user.
</summary>
            <summary>
Returns a pointer to a mutable HelperData class that contains the de-serialized data.
This is used for internal methods.
</summary>
        </member>
        <member name="T:FieaGameEngine.IJsonParseHelper">
            <summary>
Provides polymorphic interface for helpers managed by the IJsonCoordinator.
The IJsonCoordinator has vector of derived ParseHelpers. 
We want to call methods polymorphically from those ParseHelpers so we have them derive from this base IJsonParseHelper
</summary>
        </member>
        <member name="F:FieaGameEngine.HelperData._depth">
            <summary>
Value that represents the depth at which the HelperData is currently in within it's traversal in a Json structure.
</summary>
        </member>
        <member name="M:FieaGameEngine.HelperData.Depth">
            <summary>
Returns a value representing where the HelperData currently is in respect to it's traversal in a Json structure.
</summary>
            <returns />
        </member>
        <member name="M:FieaGameEngine.HelperData.DecrementDepth">
            <summary>
Decrements the Depth of the HelperData to accurately track it's traversal within Json structures.
</summary>
        </member>
        <member name="M:FieaGameEngine.HelperData.IncrementDepth">
            <summary>
Increments the Depth of the HelperData to accurately track it's traversal within Json structures.
</summary>
        </member>
        <member name="M:FieaGameEngine.HelperData.Clear">
            <summary>
Will clear the HelperData class of all de-serialized data.
</summary>
        </member>
        <member name="T:FieaGameEngine.HelperData">
            <summary>
Provides polymorphic interface for classes that contains de-serialized data.
Helpers each have their unique binded derived HelperData class. Each of those inherit from this Base HelperData class.
</summary>
        </member>
        <member name="M:Json.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Output using the StyledStreamWriter.
\see Json::operator&gt;&gt;()
</member>
        <member name="M:Json.StyledStreamWriter.write(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Serialize a Value in <a HREF="http://www.json.org">JSON</a> format.
   * \param out Stream to write to. (Can be ostringstream, e.g.)
   * \param root Value to serialize.
   * \note There is no point in deriving from Writer, since write() should not
   * return a value.

</member>
        <member name="M:Json.StyledStreamWriter.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
\param indentation Each level will be indented by this amount extra.

</member>
        <member name="M:Json.StyledWriter.write(Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Serialize a Value in <a HREF="http://www.json.org">JSON</a> format.
   * \param root Value to serialize.
   * \return String containing the JSON document that represents the root value.

</member>
        <member name="M:Json.FastWriter.dropNullPlaceholders">
\brief Drop the "null" string from the writer's output for nullValues.
   * Strictly speaking, this is not valid JSON. But when the output is being
   * fed to a browser's JavaScript, it makes for smaller output and the
   * browser can handle the output just fine.

</member>
        <member name="T:Json.FastWriter">
\brief Outputs a Value in <a HREF="http://www.json.org">JSON</a> format
 *without formatting (not human friendly).
 *
 * The JSON document is written in a single line. It is not intended for 'human'
 *consumption,
 * but may be useful to support feature such as RPC where bandwidth is limited.
 * \sa Reader, Value
 * \deprecated Use StreamWriterBuilder.

</member>
        <member name="T:Json.Writer">
\brief Abstract class for writers.
 * \deprecated Use StreamWriter. (And really, this is an implementation detail.)

</member>
        <member name="M:Json.StreamWriterBuilder.setDefaults(Json.Value*)">
Called by ctor, but you can use this to reset settings_.
   * \pre 'settings' != NULL (but Json::null is fine)
   * \remark Defaults:
   * \snippet src/lib_json/json_writer.cpp StreamWriterBuilderDefaults

</member>
        <member name="M:Json.StreamWriterBuilder.op_Subscript(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
A simple way to update a specific setting.

</member>
        <member name="M:Json.StreamWriterBuilder.validate(Json.Value*)">
\return true if 'settings' are legal and consistent;
   *   otherwise, indicate bad settings via 'invalid'.

</member>
        <member name="M:Json.StreamWriterBuilder.newStreamWriter">
\throw std::exception if something goes wrong (e.g. invalid settings)

</member>
        <member name="M:Json.writeString(Json.StreamWriter.Factory!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Write into stringstream, then return string, for convenience.
 * A StreamWriter will be created from the factory, used, and then deleted.

</member>
        <member name="M:Json.StreamWriter.Factory.newStreamWriter">
\brief Allocate a CharReader via operator new().
     * \throw std::exception if something goes wrong (e.g. invalid settings)

</member>
        <member name="T:Json.StreamWriter.Factory">
\brief A simple abstract factory.

</member>
        <member name="M:Json.StreamWriter.write(Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*)">
Write Value into document as configured in sub-class.
   *   Do not take ownership of sout, but maintain a reference during function.
   *   \pre sout != NULL
   *   \return zero on success (For now, we always return zero, so check the
   *   stream instead.) \throw std::exception possibly, depending on
   * configuration

</member>
        <member name="M:Json.parseFromStream(Json.CharReader.Factory!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_istream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Json.Value*,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*)">
Consume entire stream and use its begin/end.
 * Someday we might have a real StreamReader, but for now this
 * is convenient.

</member>
        <member name="M:Json.CharReaderBuilder.strictMode(Json.Value*)">
Same as old Features::strictMode().
   * \pre 'settings' != NULL (but Json::null is fine)
   * \remark Defaults:
   * \snippet src/lib_json/json_reader.cpp CharReaderBuilderStrictMode

</member>
        <member name="M:Json.CharReaderBuilder.setDefaults(Json.Value*)">
Called by ctor, but you can use this to reset settings_.
   * \pre 'settings' != NULL (but Json::null is fine)
   * \remark Defaults:
   * \snippet src/lib_json/json_reader.cpp CharReaderBuilderDefaults

</member>
        <member name="M:Json.CharReaderBuilder.op_Subscript(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
A simple way to update a specific setting.

</member>
        <member name="M:Json.CharReaderBuilder.validate(Json.Value*)">
\return true if 'settings' are legal and consistent;
   *   otherwise, indicate bad settings via 'invalid'.

</member>
        <member name="F:Json.CharReaderBuilder.settings_">
Configuration of this builder.
   * These are case-sensitive.
   * Available settings (case-sensitive):
   * - `"collectComments": false or true`
   *   - true to collect comment and allow writing them back during
   *     serialization, false to discard comments.  This parameter is ignored
   *     if allowComments is false.
   * - `"allowComments": false or true`
   *   - true if comments are allowed.
   * - `"allowTrailingCommas": false or true`
   *   - true if trailing commas in objects and arrays are allowed.
   * - `"strictRoot": false or true`
   *   - true if root must be either an array or an object value
   * - `"allowDroppedNullPlaceholders": false or true`
   *   - true if dropped null placeholders are allowed. (See
   *     StreamWriterBuilder.)
   * - `"allowNumericKeys": false or true`
   *   - true if numeric object keys are allowed.
   * - `"allowSingleQuotes": false or true`
   *   - true if '' are allowed for strings (both keys and values)
   * - `"stackLimit": integer`
   *   - Exceeding stackLimit (recursive depth of `readValue()`) will cause an
   *     exception.
   *   - This is a security issue (seg-faults caused by deeply nested JSON), so
   *     the default is low.
   * - `"failIfExtra": false or true`
   *   - If true, `parse()` returns false when extra non-whitespace trails the
   *     JSON value in the input string.
   * - `"rejectDupKeys": false or true`
   *   - If true, `parse()` returns false when a key is duplicated within an
   *     object.
   * - `"allowSpecialFloats": false or true`
   *   - If true, special float values (NaNs and infinities) are allowed and
   *     their values are lossfree restorable.
   * - `"skipBom": false or true`
   *   - If true, if the input starts with the Unicode byte order mark (BOM),
   *     it is skipped.
   *
   * You can examine 'settings_` yourself to see the defaults. You can also
   * write and read them just like any JSON Value.
   * \sa setDefaults()

</member>
        <member name="M:Json.CharReader.Factory.newCharReader">
\brief Allocate a CharReader via operator new().
     * \throw std::exception if something goes wrong (e.g. invalid settings)

</member>
        <member name="M:Json.CharReader.parse(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,Json.Value*,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*)">
\brief Read a Value from a <a HREF="http://www.json.org">JSON</a>
   * document. The document must be a UTF-8 encoded string containing the
   * document to read.
   *
   * \param      beginDoc Pointer on the beginning of the UTF-8 encoded string
   *                      of the document to read.
   * \param      endDoc   Pointer on the end of the UTF-8 encoded string of the
   *                      document to read. Must be &gt;= beginDoc.
   * \param[out] root     Contains the root value of the document if it was
   *                      successfully parsed.
   * \param[out] errs     Formatted error messages (if not NULL) a user
   *                      friendly string that lists errors in the parsed
   *                      document.
   * \return \c true if the document was successfully parsed, \c false if an
   * error occurred.

</member>
        <member name="T:Json.CharReader">
Interface for reading JSON from a char array.

</member>
        <member name="M:Json.Reader.good">
\brief Return whether there are any errors.
   *
   * \return \c true if there are no errors to report \c false if errors have
   * occurred.

</member>
        <member name="M:Json.Reader.pushError(Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Add a semantic error message with extra context.
   *
   * \param value   JSON Value location associated with the error
   * \param message The error message.
   * \param extra   Additional JSON Value location to contextualize the error
   * \return \c true if the error was successfully added, \c false if either
   * Value offset exceeds the document size.

</member>
        <member name="M:Json.Reader.pushError(Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Add a semantic error message.
   *
   * \param value   JSON Value location associated with the error
   * \param message The error message.
   * \return \c true if the error was successfully added, \c false if the Value
   * offset exceeds the document size.

</member>
        <member name="M:Json.Reader.getStructuredErrors">
\brief Returns a vector of structured errors encountered while parsing.
   *
   * \return A (possibly empty) vector of StructuredError objects. Currently
   * only one error can be returned, but the caller should tolerate multiple
   * errors.  This can occur if the parser recovers from a non-fatal parse
   * error and then encounters additional errors.

</member>
        <member name="M:Json.Reader.getFormattedErrorMessages">
\brief Returns a user friendly string that list errors in the parsed
   * document.
   *
   * \return Formatted error message with the list of errors with their
   * location in the parsed document. An empty string is returned if no error
   * occurred during parsing.

</member>
        <member name="M:Json.Reader.getFormatedErrorMessages">
\brief Returns a user friendly string that list errors in the parsed
   * document.
   *
   * \return Formatted error message with the list of errors with their
   * location in the parsed document. An empty string is returned if no error
   * occurred during parsing.
   * \deprecated Use getFormattedErrorMessages() instead (typo fix).

</member>
        <member name="M:Json.Reader.parse(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,Json.Value*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
\brief Read a Value from a <a HREF="http://www.json.org">JSON</a>
   * document.
   *
   * \param      beginDoc        Pointer on the beginning of the UTF-8 encoded
   *                             string of the document to read.
   * \param      endDoc          Pointer on the end of the UTF-8 encoded string
   *                             of the document to read.  Must be &gt;= beginDoc.
   * \param[out] root            Contains the root value of the document if it
   *                             was successfully parsed.
   * \param      collectComments \c true to collect comment and allow writing
   *                             them back during serialization, \c false to
   *                             discard comments.  This parameter is ignored
   *                             if Features::allowComments_ is \c false.
   * \return \c true if the document was successfully parsed, \c false if an
   * error occurred.

</member>
        <member name="M:Json.Reader.parse(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Json.Value*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
\brief Read a Value from a <a HREF="http://www.json.org">JSON</a>
   * document.
   *
   * \param      document        UTF-8 encoded string containing the document
   *                             to read.
   * \param[out] root            Contains the root value of the document if it
   *                             was successfully parsed.
   * \param      collectComments \c true to collect comment and allow writing
   *                             them back during serialization, \c false to
   *                             discard comments.  This parameter is ignored
   *                             if Features::allowComments_ is \c false.
   * \return \c true if the document was successfully parsed, \c false if an
   * error occurred.

</member>
        <member name="M:Json.Reader.#ctor(Json.Features!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Constructs a Reader allowing the specified feature set for parsing.
    * \deprecated Use CharReader and CharReaderBuilder.

</member>
        <member name="M:Json.Reader.#ctor">
\brief Constructs a Reader allowing all features for parsing.
    * \deprecated Use CharReader and CharReaderBuilder.

</member>
        <member name="T:Json.Reader.StructuredError">
\brief An error tagged with where in the JSON text it was encountered.
   *
   * The offsets give the [start, limit) range of bytes within the text. Note
   * that this is bytes, not codepoints.

</member>
        <member name="T:Json.Reader">
\brief Unserialize a <a HREF="http://www.json.org">JSON</a> document into a
 * Value.
 *
 * \deprecated Use CharReader and CharReaderBuilder.

</member>
        <member name="T:Json.ValueIterator">
\brief Iterator for object and array value.

</member>
        <member name="T:Json.ValueConstIterator">
\brief const iterator for object and array value.
 *

</member>
        <member name="M:Json.ValueIteratorBase.memberName(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**)">
Return the member name of the referenced Value, or NULL if it is not an
objectValue.
\note Better version than memberName(). Allows embedded nulls.
</member>
        <member name="M:Json.ValueIteratorBase.memberName">
Return the member name of the referenced Value. "" if it is not an
objectValue.
\deprecated This cannot be used for UTF-8 strings, since there can be
embedded nulls.
</member>
        <member name="M:Json.ValueIteratorBase.name">
Return the member name of the referenced Value, or "" if it is not an
objectValue.
\note Avoid `c_str()` on result, as embedded zeroes are possible.
</member>
        <member name="M:Json.ValueIteratorBase.index">
Return the index of the referenced Value, or -1 if it is not an
arrayValue.
</member>
        <member name="M:Json.ValueIteratorBase.key">
Return either the index or the member name of the referenced value as a
Value.
</member>
        <member name="T:Json.ValueIteratorBase">
\brief base class for Value iterators.
 *

</member>
        <member name="M:Json.Path.make(Json.Value*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Creates the "path" to access the specified node and returns a reference on
the node.
</member>
        <member name="T:Json.Path">
\brief Experimental and untested: represents a "path" to access a node.
 *
 * Syntax:
 * - "." =&gt; root node
 * - ".[n]" =&gt; elements at index 'n' of root node (an array value)
 * - ".name" =&gt; member named 'name' of root node (an object value)
 * - ".name1.name2.name3"
 * - ".[0][1][2].name1[3]"
 * - ".%" =&gt; member name is provided as parameter
 * - ".[%]" =&gt; index is provided as parameter

</member>
        <member name="T:Json.PathArgument">
\brief Experimental and untested: represents an element of the "path" to
 * access a node.

</member>
        <member name="M:Json.Value.getComment(Json.CommentPlacement)">
Include delimiters and embedded newlines.
</member>
        <member name="M:Json.Value.setComment(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,Json.CommentPlacement)">
Comments must be //... or /* ... */
</member>
        <member name="M:Json.Value.setComment(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,Json.CommentPlacement)">
Comments must be //... or /* ... */
</member>
        <member name="M:Json.Value.setComment(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,Json.CommentPlacement)">
\deprecated Always pass len.
</member>
        <member name="M:Json.Value.getMemberNames">
\brief Return a list of the member names.

If null, return an empty list.
\pre type() is objectValue or nullValue
\post if type() was nullValue, it remains nullValue
</member>
        <member name="M:Json.Value.isMember(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Return true if the object has a member named key.
\param key may contain embedded nulls.
</member>
        <member name="M:Json.Value.isMember(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Return true if the object has a member named key.
\note 'key' must be null-terminated.
</member>
        <member name="M:Json.Value.removeIndex(System.UInt32,Json.Value*)">
\brief Remove the indexed array element.
   *
   *  O(n) expensive operations.
   *  Update 'removed' iff removed.
   *  \return true if removed (no exceptions)

</member>
        <member name="M:Json.Value.removeMember(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Json.Value*)">
\brief Remove the named map member.
   *
   *  Update 'removed' iff removed.
   *  \param key may contain embedded nulls.
   *  \return true iff removed (no exceptions)

</member>
        <member name="M:Json.Value.removeMember(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,Json.Value*)">
Same as removeMember(const char* begin, const char* end, Value* removed),
but 'key' is null-terminated.
</member>
        <member name="M:Json.Value.removeMember(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Same as removeMember(const char*)
\param key may contain embedded nulls.
</member>
        <member name="M:Json.Value.removeMember(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief Remove and return the named member.

Do nothing if it did not exist.
\pre type() is objectValue or nullValue
\post type() is unchanged
</member>
        <member name="M:Json.Value.demand(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Most general and efficient version of object-mutators.
\note As stated elsewhere, behavior is undefined if (end-begin) &gt;= 2^30
\return non-zero, but JSON_ASSERT if this is neither object nor nullValue.
</member>
        <member name="M:Json.Value.find(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Most general and efficient version of isMember()const, get()const,
and operator[]const
\note As stated elsewhere, behavior is undefined if (end-begin) &gt;= 2^30
</member>
        <member name="M:Json.Value.get(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Return the member named key if it exist, defaultValue otherwise.
\note deep copy
\param key may contain embedded nulls.
</member>
        <member name="M:Json.Value.get(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Return the member named key if it exist, defaultValue otherwise.
\note deep copy
\note key may contain embedded nulls.
</member>
        <member name="M:Json.Value.get(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Return the member named key if it exist, defaultValue otherwise.
\note deep copy
</member>
        <member name="M:Json.Value.op_Subscript(Json.StaticString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Access an object value by name, create a null member if it does not
   * exist.
   *
   * If the object has no entry for that name, then the member name used to
   * store the new entry is not duplicated.
   * Example of use:
   *   \code
   *   Json::Value object;
   *   static const StaticString code("code");
   *   object[code] = 1234;
   *   \endcode

</member>
        <member name="M:Json.Value.op_Subscript(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Access an object value by name, create a null member if it does not exist.
\param key may contain embedded nulls.

Access an object value by name, returns null if there is no member with
that name.
\param key may contain embedded nulls.
</member>
        <member name="M:Json.Value.op_Subscript(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Access an object value by name, create a null member if it does not exist.
\note Because of our implementation, keys are limited to 2^30 -1 chars.
Exceeding that will cause an exception.

Access an object value by name, returns null if there is no member with
that name.
</member>
        <member name="M:Json.Value.insert(System.UInt32,Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Insert value in array at specific index
</member>
        <member name="M:Json.Value.append(Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Append value to array at the end.

Equivalent to jsonvalue[jsonvalue.size()] = value;
</member>
        <member name="M:Json.Value.get(System.UInt32,Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
If the array contains at least index+1 elements, returns the element
value, otherwise returns defaultValue.
</member>
        <member name="M:Json.Value.op_Subscript(System.UInt32)">
Access an array element (zero based index). If the array contains less
than index element, then null value are inserted in the array so that
its size is index+1.
(You may need to say 'value[0u]' to get your compiler to distinguish
this from the operator[] which takes a string.)

Access an array element (zero based index).
(You may need to say 'value[0u]' to get your compiler to distinguish
this from the operator[] which takes a string.)
</member>
        <member name="M:Json.Value.resize(System.UInt32)">
Resize the array to newSize elements.
New elements are initialized to null.
May only be called on nullValue or arrayValue.
\pre type() is arrayValue or nullValue
\post type() is arrayValue
</member>
        <member name="M:Json.Value.clear">
Remove all object members and array elements.
\pre type() is arrayValue, objectValue, or nullValue
\post type() is unchanged
</member>
        <member name="M:Json.Value.op_Explicit~System.Boolean">
Return !isNull()
</member>
        <member name="M:Json.Value.empty">
\brief Return true if empty array, empty object, or null;
otherwise, false.
</member>
        <member name="M:Json.Value.size">
Number of values in array or object
</member>
        <member name="M:Json.Value.getString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**)">
Get raw char* of string-value.
   *  \return false if !string. (Seg-fault if str or end are NULL.)

</member>
        <member name="M:Json.Value.op_LessThan(Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Compare payload only, not comments etc.
</member>
        <member name="M:Json.Value.copyPayload(Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
copy values but leave comments and source offsets in place.
</member>
        <member name="M:Json.Value.copy(Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
copy everything.
</member>
        <member name="M:Json.Value.swapPayload(Json.Value*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Swap values but leave comments and source offsets in place.
</member>
        <member name="M:Json.Value.swap(Json.Value*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Swap everything.
</member>
        <member name="M:Json.Value.op_Assign(Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\note Overwrite existing comments. To preserve comments, use
#swapPayload().
</member>
        <member name="M:Json.Value.#ctor(Json.StaticString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 \brief Constructs a value from a static string.

 Like other value string constructor but do not duplicate the string for
 internal storage. The given string must remain alive after the call to
 this constructor.

 \note This works only for null-terminated strings. (We cannot change the
 size of this class, so we have nowhere to store the length, which might be
 computed later for various operations.)

 Example of usage:
   \code
   static StaticString foo("some text");
   Json::Value aValue(foo);
   \endcode

</member>
        <member name="M:Json.Value.#ctor(Json.ValueType)">
 \brief Create a default Value of the given type.

 This is a very useful constructor.
 To create an empty array, pass arrayValue.
 To create an empty object, pass objectValue.
 Another Value can then be set to this one by assignment.
 This is useful since clear() and resize() will not alter types.

 Examples:
   \code
   Json::Value null_value; // null
   Json::Value arr_value(Json::arrayValue); // []
   Json::Value obj_value(Json::objectValue); // {}
   \endcode

</member>
        <member name="F:Json.Value.defaultRealPrecision">
Default precision for real value for string representation.
</member>
        <member name="F:Json.Value.maxUInt64">
Maximum unsigned 64 bits int value that can be stored in a Json::Value.
</member>
        <member name="F:Json.Value.maxInt64">
Maximum signed 64 bits int value that can be stored in a Json::Value.
</member>
        <member name="F:Json.Value.minInt64">
Minimum signed 64 bits int value that can be stored in a Json::Value.
</member>
        <member name="F:Json.Value.maxUInt">
Maximum unsigned int value that can be stored in a Json::Value.
</member>
        <member name="F:Json.Value.maxInt">
Maximum signed int value that can be stored in a Json::Value.
</member>
        <member name="F:Json.Value.minInt">
Minimum signed int value that can be stored in a Json::Value.
</member>
        <member name="F:Json.Value.maxLargestUInt">
Maximum unsigned integer value that can be stored in a Json::Value.
</member>
        <member name="F:Json.Value.maxLargestInt">
Maximum signed integer value that can be stored in a Json::Value.
</member>
        <member name="F:Json.Value.minLargestInt">
Minimum signed integer value that can be stored in a Json::Value.
</member>
        <member name="T:Json.StaticString">
\brief Lightweight wrapper to tag static string.
 *
 * Value constructor and objectValue member assignment takes advantage of the
 * StaticString and avoid the cost of string duplication when storing the
 * string or the member name.
 *
 * Example of usage:
 * \code
 * Json::Value aValue( StaticString("some text") );
 * Json::Value object;
 * static const StaticString code("code");
 * object[code] = 1234;
 * \endcode

</member>
        <member name="T:Json.PrecisionType">
\brief Type of precision for formatting of real values.

</member>
        <member name="F:numberOfCommentPlacement">
root value)
</member>
        <member name="T:Json.ValueType">
\brief Type of the value held by a Value object.

</member>
        <member name="M:Json.throwLogicError(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
used internally
</member>
        <member name="M:Json.throwRuntimeError(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
used internally
</member>
        <member name="T:Json.LogicError">
Exceptions thrown by JSON_ASSERT/JSON_FAIL macros.
 *
 * These are precondition-violations (user bugs) and internal errors (our bugs).
 *
 * \remark derived from Json::Exception

</member>
        <member name="T:Json.RuntimeError">
Exceptions which the user cannot easily avoid.
 *
 * E.g. out-of-memory (when we use malloc), stack-overflow, malicious input
 *
 * \remark derived from Json::Exception

</member>
        <member name="T:Json.Exception">
Base class for all exceptions we throw.
 *
 * We use nothing but these internally. Of course, STL can throw others.

</member>
        <member name="F:Json.Features.allowNumericKeys_">
\c true if numeric object key are allowed. Default: \c false.
</member>
        <member name="F:Json.Features.allowDroppedNullPlaceholders_">
\c true if dropped null placeholders are allowed. Default: \c false.
</member>
        <member name="F:Json.Features.strictRoot_">
\c true if root must be either an array or an object value. Default: \c
false.
</member>
        <member name="F:Json.Features.allowComments_">
\c true if comments are allowed. Default: \c true.
</member>
        <member name="M:Json.Features.#ctor">
\brief Initialize the configuration like JsonConfig::allFeatures;

</member>
        <member name="M:Json.Features.strictMode">
\brief A configuration that is strictly compatible with the JSON
   * specification.
   * - Comments are forbidden.
   * - Root object must be either an array or an object value.
   * - Assumes Value strings are encoded in UTF-8

</member>
        <member name="T:Json.Features">
\brief Configuration passed to reader and writer.
 * This configuration object can be used to force the Reader or Writer
 * to behave in a standard conforming way.

</member>
        <member name="F:FieaGameEngine.UtilityWin32.sWndProcHandlers">
            <summary>
Accessible globally since it has been made static
</summary>
        </member>
        <member name="M:FieaGameEngine.UtilityWin32.RemoveWndProcHandler(std.shared_ptr&lt;std.function&lt;(HWND__*,System.UInt32,System.UInt32,System.Int32!System.Runtime.CompilerServices.IsLong)(HWND__**,System.UInt32,System.UInt32,System.Int32!System.Runtime.CompilerServices.IsLong)&gt;&gt;)">
            <summary>
Removes a Window Handler from the vector of Window Handlers. 
</summary>
            <param name="handler">A Window Handler to be removed from the vector of Window Handlers.</param>
        </member>
        <member name="M:FieaGameEngine.UtilityWin32.AddWndProcHandler(std.shared_ptr&lt;std.function&lt;(HWND__*,System.UInt32,System.UInt32,System.Int32!System.Runtime.CompilerServices.IsLong)(HWND__**,System.UInt32,System.UInt32,System.Int32!System.Runtime.CompilerServices.IsLong)&gt;&gt;)">
            <summary>
Adds Window Handler to the vector of Window Handlers. 
</summary>
            <param name="handler">A Window Handler to be added to the vector of Window Handlers.</param>
        </member>
        <member name="M:FieaGameEngine.UtilityWin32.WndProcHandlers">
            <summary>
Returns a reference to a vector of Window Handlers (effectively a vector of function pointers). 
</summary>
            <returns>Non mutable reference to a vector of Window Handlers.</returns>
        </member>
        <member name="M:FieaGameEngine.UtilityWin32.ExecutableDirectory">
            <summary>
Return an object of type path that describes the executable directory path.
</summary>
            <returns>Executable directory path</returns>
        </member>
        <member name="M:FieaGameEngine.UtilityWin32.CenterWindow(tagSIZE!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Helper function used to center the window to the middle of the screen.
Implemented in the InitializeWindow method.
</summary>
            <param name="windowSize">Typdef that holds the windows dimensions</param>
            <returns>The POINT structure defines the x- and y-coordinates of a point.</returns>
        </member>
        <member name="M:FieaGameEngine.UtilityWin32.WndProc(HWND__*,System.UInt32,System.UInt32,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="windowHandle" />
            <param name="message" />
            <param name="wParam" />
            <param name="lParam" />
            <returns />
        </member>
        <member name="M:FieaGameEngine.UtilityWin32.InitializeWindow(tagWNDCLASSEXW*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,HWND__**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,HINSTANCE__*,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagSIZE!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary>
Creates a window with specific settings passed through parameters.
</summary>
            <param name="window">Contains window class information.</param>
            <param name="windowHandle">HWNDs are essentially pointers (IntPtr) with values that make them (sort of) point to a window-structure data.</param>
            <param name="instance">The operating system uses this value to identify the executable (EXE) when it is loaded in memory.</param>
            <param name="className">"Identifier to help distinguish this window from the sea of windows on the operation system."</param>
            <param name="windowTitle">Title will be displayed at the top of the window.</param>
            <param name="renderTargetSize">typdef that holds the windows dimensions</param>
            <param name="showCommand">Set the specified windows show state. Received from the program entry point arguments list.</param>
        </member>
        <member name="T:FieaGameEngine.UtilityWin32">
            <summary>
Encapsulates Win32 API calls in a class using functional programming practices.
</summary>
        </member>
        <member name="F:FieaGameEngine.ActionStaticMesh._filePath">
            <summary>
Name of an integer member variable we wish to target.
Use case is an integer member variable of the parent object or an object up the hierarchy.
</summary>
        </member>
        <member name="M:FieaGameEngine.ActionStaticMesh.Register">
            <summary>
Macros is defined in TypeRegistry header file.
This is used to register this class with the TypeRegistry.
Will start a recursive call that will register all classes that are inherited.
</summary>
            <param name="">Derived Class</param>
            <param name="">Base Class</param>
        </member>
        <member name="M:FieaGameEngine.ActionStaticMesh.Signatures">
            <summary>
Method is used for registering this types signatures and for classes that inherit from Action.
Used by TypeRegistry class
</summary>
            <returns>
This classes unique signatures.
</returns>
        </member>
        <member name="M:FieaGameEngine.ActionStaticMesh.Update(FieaGameEngine.GameState!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary />
            <param name="gameState">reference to a class that governs the state of the game</param>
        </member>
        <member name="M:FieaGameEngine.ActionStaticMesh.Init(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary />
            <param name="step">The amount to increment an integer by everytime update is called</param>
            <param name="targetKey">Name of member variable we wish to increment.Use case target is usually the parent objects data member</param>
        </member>
        <member name="M:FieaGameEngine.ActionStaticMesh.Init(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Can set the member variables of the Action after construction. 
Actions will not be automatically populated when conjured by the user.
</summary>
            <param name="name">Name that uniquely identifies this Action</param>
            <param name="step">The amount to increment an integer by everytime update is called</param>
            <param name="targetKey">Name of member variable we wish to increment. Use case target is usually the parent objects data member</param>
        </member>
        <member name="M:FieaGameEngine.ActionStaticMesh.Equals(FieaGameEngine.RTTI!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Compares one GameObject with another.
Overridden function from RTTI.
</summary>
            <param name="rhs">The GameObject to compare against</param>
            <returns>
TRUE if the GameObject is equivalent.
FALSE if the GameObject is not equivalent
</returns>
        </member>
        <member name="M:FieaGameEngine.ActionStaticMesh.Clone">
            <summary>
Clones the calling Action. Heap constructs this object and it's on the user to manage its memory.
Overridden function from Scope.
</summary>
            <returns>
A pointer to heap allocated clone of the calling Action.
</returns>
        </member>
        <member name="M:FieaGameEngine.ActionStaticMesh.ToString">
            <summary>
Returns a string that identifies this class.
Overridden function from RTTI.
</summary>
            <returns>A string that identifies this class</returns>
        </member>
        <member name="F:FieaGameEngine.Game.mServices">
            <summary>
Contains: Keyboard, Mouse and Gamepad
To qualify as a service following criteria must be considered.
Scope access must be very broad.
Strong requirement to be a singleton, or very few instances.
</summary>
        </member>
        <member name="T:FieaGameEngine.GameObjectFactory">
            <summary>
Macro is defined in Factory header file
Will create a class that creates GameObjects and registers itself with the Factory Group. 
</summary>
            <param name="">Concrete to be made in the factory</param>
            <param name="">The group to which this concrete object belongs to. The base class designed to be the defining type for the group.</param>
        </member>
        <member name="M:FieaGameEngine.GameObject.#ctor(System.UInt32)">
            <summary>
Protected constructor that is implemented in inheriting Objects who need to pass on their TypeId to Attributed.
</summary>
            <param name="typeId">The derived classes TypeId</param>
        </member>
        <member name="M:FieaGameEngine.GameObject.Register">
            <summary>
Macros is defined in TypeRegistry header file.
This is used to register this class with the TypeRegistry.
Will start a recursive call that will register all classes that are inherited.
</summary>
            <param name="">Derived Class</param>
            <param name="">Base Class</param>
        </member>
        <member name="M:FieaGameEngine.GameObject.Signatures">
            <summary>
Author declared and compiler defined copy constructor
</summary>
            <param name="">A GameObject to copy</param>
            <summary>
Author declared and compiler defined move constructor
</summary>
            <param name="">A GameObject to move</param>
            <summary>
Author declared and compiler defined copy assignment
</summary>
            <param name="">A GameObject to copy</param>
            <returns>A mutable reference to this GameObject</returns>
            <summary>
Author declared and compiler defined move assignment
</summary>
            <param name="">A GameObject to move</param>
            <returns>A mutable reference to this GameObject</returns>
            <summary>
Method is used for registering this types signatures and for classes that inherit from GameObject.
Used by TypeRegistry class
</summary>
            <returns>
This classes unique signatures.
</returns>
        </member>
        <member name="M:FieaGameEngine.GameObject.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,glm.vec&lt;0x4,System.Single,glm::packed_highp&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,glm.vec&lt;0x4,System.Single,glm::packed_highp&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,glm.vec&lt;0x4,System.Single,glm::packed_highp&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.Compile">
            <summary>
Constructor that takes in a string for name and position, rotation and scale.
</summary>
            <param name="name">string for name</param>
            <param name="position">A vector for position</param>
            <param name="rotation">A vector for rotation</param>
            <param name="scale">A vector for scale</param>
        </member>
        <member name="M:FieaGameEngine.GameObject.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,FieaGameEngine.Transform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructor that takes in a string for name and a transform which is a container for position, rotation and scale.
</summary>
            <param name="name">string for name</param>
            <param name="transform">Container for position, rotation and scale</param>
        </member>
        <member name="M:FieaGameEngine.GameObject.#ctor">
            <summary>
Default Constructor.
</summary>
        </member>
        <member name="M:FieaGameEngine.GameObject.CreateAction(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Creates and action and appends it to the GameObjects actions list.
</summary>
            <param name="actionClassName">Name of the Action class to append</param>
            <param name="name">Assign the Action class to be created a name</param>
            <returns>A base reference to the action created.</returns>
        </member>
        <member name="M:FieaGameEngine.GameObject.GetActions">
            <summary>
Gets the actions datum which contains the actions for this GameObject.
</summary>
            <returns />
        </member>
        <member name="M:FieaGameEngine.GameObject.ToString">
            <summary>
Returns a string that identifies this class.
Overridden function from RTTI.
</summary>
            <returns>A string that identifies this class</returns>
        </member>
        <member name="M:FieaGameEngine.GameObject.Equals(FieaGameEngine.RTTI!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Compares one GameObject with another.
Overridden function from RTTI.
</summary>
            <param name="rhs">The GameObject to compare against</param>
            <returns>
TRUE if the GameObject is equivalent.
FALSE if the GameObject is not equivalent
</returns>
        </member>
        <member name="M:FieaGameEngine.GameObject.Update(FieaGameEngine.GameState!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Update method will update the GameObject and then recursively update all it's children GameObjects.
Made virtual so any derived classes from GameObject can have their own update method and be called polymorphically.
</summary>
            <param name="gameTime">A reference to the game time</param>
        </member>
        <member name="M:FieaGameEngine.GameObject.Clone">
            <summary>
Clones the calling GameObject. Heap constructs this object and it's on the user to manage its memory.
Overridden function from Scope.
</summary>
            <returns>
A pointer to heap allocated clone of the calling GameObject.
</returns>
        </member>
        <member name="M:FieaGameEngine.Transform.op_Assign(FieaGameEngine.Transform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Copies transform values.
</summary>
            <param name="">A Transform to copy from</param>
            <returns>A mutable reference to this Transform object</returns>
        </member>
        <member name="M:FieaGameEngine.Transform.#ctor(FieaGameEngine.Transform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Copies transform values.
</summary>
            <param name="">A Transform to copy from</param>
        </member>
        <member name="M:FieaGameEngine.Transform.#ctor(glm.vec&lt;0x4,System.Single,glm::packed_highp&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,glm.vec&lt;0x4,System.Single,glm::packed_highp&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,glm.vec&lt;0x4,System.Single,glm::packed_highp&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Takes the following information for a GameObject: Position, Rotation and Scale.
</summary>
            <param name="position">Position of the GameObject</param>
            <param name="rotation">Rotation of the GameObject</param>
            <param name="scale">Scale of the GameObject</param>
        </member>
        <member name="M:FieaGameEngine.Transform.#ctor">
            <summary>
Default constructor.
</summary>
        </member>
        <member name="T:FieaGameEngine.Transform">
            <summary>
Used to store the the position, rotation and scale of a GameObject
</summary>
        </member>
        <member name="M:FieaGameEngine.GameState.DeleteActions">
            <summary>
Accesses the static container that stores references and position to actions that will be deleted and stored for deletion in the recently executed update cycle.
Access the references and positions of the actions to delete and deletes them.
All deleted actions will not longer be callable in the next update cycle.
</summary>
        </member>
        <member name="M:FieaGameEngine.GameState.CreateActions">
            <summary>
Accesses the static container that stores actions created within a recently executed update cycle.
Links the created actions into their respective parents (GameObject/ActionList/etc).
All linked actions will be callable in the next update cycle.
</summary>
        </member>
        <member name="M:FieaGameEngine.GameState.FinalizeUpdate">
            <summary>
After all updates are called in the game this function will be called to finalize any pending updates.
Pending updates are by design meant to be "finalized" after all updates have been called in game.
</summary>
        </member>
        <member name="M:FieaGameEngine.EventQueue.AddPendingEventsToEventQueue">
            <summary>
Helper function
Adds the pending events from the pending event queue into the main event queue
</summary>
        </member>
        <member name="M:FieaGameEngine.EventQueue.DeliverAndRemoveExpiredEvents(FieaGameEngine.GameState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Helper function
Partitions the events based on if they are expired.
Deliveries all expired events and then removes them them from the queue.
</summary>
        </member>
        <member name="F:FieaGameEngine.EventQueue._pendingEventQueue">
            <summary>
Stores events that are generated during the update process to be appended once the main event queue finishes.
</summary>
        </member>
        <member name="F:FieaGameEngine.EventQueue._eventQueue">
            <summary>
Main event queue that stores events to be fired in the next update
</summary>
        </member>
        <member name="F:FieaGameEngine.EventQueue._pendClear">
            <summary>
To be set when the Clear method is called in the middle of an update.
</summary>
        </member>
        <member name="F:FieaGameEngine.EventQueue._isUpdating">
            <summary>
Flag used to communicate to events that attempt to edit the eventQueue during an update.
</summary>
        </member>
        <member name="F:FieaGameEngine.EventQueue.QueuedEvent._expiration">
            <summary>
Time which this event will expire
</summary>
        </member>
        <member name="F:FieaGameEngine.EventQueue.QueuedEvent._eP">
            <summary>
Pointer to an event publisher
</summary>
        </member>
        <member name="M:FieaGameEngine.EventQueue.QueuedEvent.#ctor(FieaGameEngine.EventPublisher*,std.chrono.time_point&lt;std.chrono.steady_clock,std.chrono.duration&lt;System.Int64,std.ratio&lt;0x01,0x03b9aca00&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructor
</summary>
            <param name="eP">Pointer to an event publisher</param>
            <param name="expiration">experiration time</param>
        </member>
        <member name="T:FieaGameEngine.EventQueue.QueuedEvent">
            <summary>
Will be used as a container to place an event and the time it was inserted into the event queue.
</summary>
        </member>
        <member name="M:FieaGameEngine.EventQueue.Size">
            <summary>
Returns the number of elements within the event queue
</summary>
            <returns>number of elements within the event queue</returns>
        </member>
        <member name="M:FieaGameEngine.EventQueue.IsEmpty">
            <summary>
True if the event queue is empty
False if the event queue false
</summary>
            <returns>
True if the event queue is empty
False if the event queue false
</returns>
        </member>
        <member name="M:FieaGameEngine.EventQueue.Clear">
            <summary>
Removes all events from the event queue
</summary>
        </member>
        <member name="M:FieaGameEngine.EventQueue.Enqueue(FieaGameEngine.EventPublisher*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,FieaGameEngine.GameState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.chrono.duration&lt;System.Int64,std.ratio&lt;0x01,0x03e8&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Places an event into the event queue.
</summary>
            <param name="ePublisher">event to place into the event queue</param>
            <param name="gState">A reference to the game state</param>
            <param name="delayTime">The time to delay the event from being delivered</param>
        </member>
        <member name="M:FieaGameEngine.EventQueue.Update(FieaGameEngine.GameState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Delivers events in the event queue
Removes delivered events from the event queue
</summary>
            <param name="gState" />
        </member>
        <member name="T:FieaGameEngine.EventQueue">
            <summary>
Right before the RootGameObject update method is called call the EventQueue update method.
</summary>
        </member>
        <member name="F:FieaGameEngine.EventPublisher._listOfSubscribers">
            <summary>
Contains references to subscribers
</summary>
        </member>
        <member name="M:FieaGameEngine.EventPublisher.#ctor(FieaGameEngine.Vector&lt;std.reference_wrapper&lt;FieaGameEngine.IEventSubscriber&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructor
</summary>
            <param name="listofSubscribers">Derived Event will pass a refernce to its Vector of EventPublihserk</param>
        </member>
        <member name="M:FieaGameEngine.EventPublisher.Deliver">
            <summary>
Notify all subscribers of this event.
</summary>
        </member>
        <member name="M:FieaGameEngine.IEventSubscriber.Notify(FieaGameEngine.EventPublisher!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Pure virtual method that accepts the address of an EventPublisher (the actual argument will be the event itself). 
Handlers will use the RTTI interface to verify the event type.
</summary>
            <param name="" />
        </member>
        <member name="T:FieaGameEngine.ActionDestroyActionFactory">
            <summary>
Macro is defined in Factory header file
Will create a class that creates ActionCreateAction objects and registers itself with the Factory Group. 
</summary>
            <param name="">Concrete to be made in the factory</param>
            <param name="">The group to which this concrete object belongs to. The base class designed to be the defining type for the group.</param>
        </member>
        <member name="M:FieaGameEngine.ActionDestroyAction.GetActionsToDestroy">
            <summary>
Returns the a mutable reference to the _actionsToDestroy vector. Used by GameState.
</summary>
            <returns>A mutable reference to the _actionsToDestroy vector</returns>
        </member>
        <member name="F:FieaGameEngine.ActionDestroyAction._actionsToDestroy">
            <summary>
Vector of actions to destroy requires a pair of std::size_t and Datum*. 
This is the convenience type to represent this pair.
</summary>
            <summary>
When this ActionDestroyAction locates the action to destroy its location into a vector called _actionsToDestroy.
Once the core Update phase of the game is complete the GameState class will call its finalize update method where the actions located for destruction
 will be destroyed from their respective GameObject/ActionList etc.
</summary>
        </member>
        <member name="M:FieaGameEngine.ActionDestroyAction.#ctor(System.UInt32)">
            <summary>
Constructor used when a class derived from this class is constructed
</summary>
            <param name="typeId">The class typeId passed from a class that derives from this class</param>
        </member>
        <member name="F:FieaGameEngine.ActionDestroyAction._targetActionName">
            <summary>
Name of the targets member name. Will be what we use to search for the target.
</summary>
        </member>
        <member name="M:FieaGameEngine.ActionDestroyAction.Update(FieaGameEngine.GameState!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Destroys an action targeted in the local object where this action is being called from.
If _targetActionName member is empty then this update will not do anything.
</summary>
            <param name="gameTime">A reference to the game time</param>
        </member>
        <member name="M:FieaGameEngine.ActionDestroyAction.Init(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Can set the member variables of the Action after construction. Actions will not be automatically populated when conjured by the user.
</summary>
            <param name="_targetActionName">Unique name of the action targeted for destruction</param>
        </member>
        <member name="M:FieaGameEngine.ActionDestroyAction.Init(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Can set the member variables of the Action after construction. Actions will not be automatically populated when conjured by the user.
</summary>
            <param name="name">Name that uniquely identifies this action</param>
            <param name="_targetActionName">Unique name of the action targeted for destruction</param>
        </member>
        <member name="M:FieaGameEngine.ActionDestroyAction.ToString">
            <summary>
Returns a string that identifies this class.
Overridden function from RTTI.
</summary>
            <returns>A string that identifies this class</returns>
        </member>
        <member name="M:FieaGameEngine.ActionDestroyAction.GetTargetActionName">
            <summary>
Get a mutable reference of the _targetActionName member.
</summary>
            <returns>A mutable reference of the _targetActionName member.</returns>
            <summary>
Get a const reference of the _targetActionName member.
</summary>
            <returns>A const reference of the _targetActionName member.</returns>
        </member>
        <member name="M:FieaGameEngine.ActionDestroyAction.SetTargetAction(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Target is identified by their base class name member.
Target is local to where this action is located. 
Will be the target of destruction.
</summary>
            <param name="targetKey">Actions name</param>
        </member>
        <member name="M:FieaGameEngine.ActionDestroyAction.Equals(FieaGameEngine.RTTI!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Compares one GameObject with another.
Overridden function from RTTI.
</summary>
            <param name="rhs">The GameObject to compare against</param>
            <returns>
TRUE if the GameObject is equivalent.
FALSE if the GameObject is not equivalent
</returns>
        </member>
        <member name="M:FieaGameEngine.ActionDestroyAction.Signatures">
            <summary>
Method is used for registering this types signatures and for classes that inherit from Action.
Used by TypeRegistry class
</summary>
            <returns>
This classes unique signatures.
</returns>
        </member>
        <member name="M:FieaGameEngine.ActionDestroyAction.op_Assign(FieaGameEngine.ActionDestroyAction*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Move Assignment
</summary>
            <param name="rhs">ActionDestroyAction to move</param>
            <returns>A mutable reference to this object</returns>
        </member>
        <member name="M:FieaGameEngine.ActionDestroyAction.op_Assign(FieaGameEngine.ActionDestroyAction!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Copy Assignment
</summary>
            <param name="rhs">ActionDestroyAction to copy</param>
            <returns>A mutable reference to this object</returns>
        </member>
        <member name="M:FieaGameEngine.ActionDestroyAction.#ctor(FieaGameEngine.ActionDestroyAction*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Move Constructor
</summary>
            <param name="rhs">ActionDestroyAction to move</param>
            <returns />
        </member>
        <member name="M:FieaGameEngine.ActionDestroyAction.#ctor(FieaGameEngine.ActionDestroyAction!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Copy Constructor
</summary>
            <param name="rhs">ActionDestroyAction to copy</param>
        </member>
        <member name="M:FieaGameEngine.ActionDestroyAction.#ctor">
            <summary>
Default Constructor
</summary>
        </member>
        <member name="M:FieaGameEngine.ActionDestroyAction.Register">
            <summary>
Macros is defined in TypeRegistry header file.
This is used to register this class with the TypeRegistry.
Will start a recursive call that will register all classes that are inherited.
</summary>
            <param name="">Derived Class</param>
            <param name="">Base Class</param>
        </member>
        <member name="M:FieaGameEngine.ActionDestroyAction.Clone">
            <summary>
Clones the calling Action. Heap constructs this object and it's on the user to manage its memory.
Overridden function from Scope.
</summary>
            <returns>
A pointer to heap allocated clone of the calling Action.
</returns>
        </member>
        <member name="T:FieaGameEngine.ActionCreateActionFactory">
            <summary>
Macro is defined in Factory header file
Will create a class that creates ActionCreateAction objects and registers itself with the Factory Group. 
</summary>
            <param name="">Concrete to be made in the factory</param>
            <param name="">The group to which this concrete object belongs to. The base class designed to be the defining type for the group.</param>
        </member>
        <member name="M:FieaGameEngine.ActionCreateAction.GetActionsCreated">
            <summary>
Returns the a mutable reference to the _actionsCreated vector. Used by GameState.
</summary>
            <returns>A mutable reference to the _actionsCreated vector</returns>
        </member>
        <member name="F:FieaGameEngine.ActionCreateAction._actionsCreated">
            <summary>
Vector of actions to create requires a pair of Action* and Scope*. 
This is the convenience type to represent this pair.
</summary>
            <summary>
When this ActionCreateAction creates a action it stores what it created and where to append it into a vector called _actionsCreated.
Once the core Update phase of the game is complete the GameState class will call its finalize update method where the actions created in this
update will be appended (linked) to their respective GameObject/ActionList etc.
</summary>
        </member>
        <member name="M:FieaGameEngine.ActionCreateAction.#ctor(System.UInt32)">
            <summary>
Constructor used when a class derived from this class is constructed
</summary>
            <param name="typeId">The class typeId passed from a class that derives from this class</param>
        </member>
        <member name="F:FieaGameEngine.ActionCreateAction._targetKey">
            <summary>
Name of the object which the action will created for.
If empty then defaulted to the parent object.
</summary>
        </member>
        <member name="F:FieaGameEngine.ActionCreateAction._actionToCreate">
            <summary>
Class name of the action to create.
</summary>
        </member>
        <member name="M:FieaGameEngine.ActionCreateAction.Signatures">
            <summary>
Method is used for registering this types signatures and for classes that inherit from Action.
Used by TypeRegistry class
</summary>
            <returns>
This classes unique signatures.
</returns>
        </member>
        <member name="M:FieaGameEngine.ActionCreateAction.op_Assign(FieaGameEngine.ActionCreateAction*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Move Assignment
</summary>
            <param name="rhs">Action to move</param>
            <returns>A mutable reference to itself;</returns>
        </member>
        <member name="M:FieaGameEngine.ActionCreateAction.op_Assign(FieaGameEngine.ActionCreateAction!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Copy Assignment
</summary>
            <param name="rhs">Action to copy</param>
            <returns>A mutable reference to itself</returns>
        </member>
        <member name="M:FieaGameEngine.ActionCreateAction.#ctor(FieaGameEngine.ActionCreateAction*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Move Constructor
</summary>
            <param name="rhs">Action to move</param>
        </member>
        <member name="M:FieaGameEngine.ActionCreateAction.#ctor(FieaGameEngine.ActionCreateAction!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Copy Constructor
</summary>
            <param name="rhs">Action to copy</param>
        </member>
        <member name="M:FieaGameEngine.ActionCreateAction.#ctor">
            <summary>
Default Constructor
</summary>
        </member>
        <member name="M:FieaGameEngine.ActionCreateAction.Update(FieaGameEngine.GameState!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Creates an action and assigns it to the GameObject/ActionList etc that is target.
If _actionToCreate member is empty then this update will not do anything.
</summary>
            <param name="gameTime">A reference to the game time</param>
        </member>
        <member name="M:FieaGameEngine.ActionCreateAction.Init(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Can set the member variables of the Action after construction. 
Actions will not be automatically populated when conjured by the user.
</summary>
            <param name="actionToCreate">Name of action to create</param>
            <param name="targetKey">The GameObject/ActionList to create actions for</param>
        </member>
        <member name="M:FieaGameEngine.ActionCreateAction.Init(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.R">
            <summary>
Can set the member variables of the Action after construction. 
Actions will not be automatically populated when conjured by the user.
</summary>
            <param name="name">Name that uniquely identifies this Action</param>
            <param name="actionToCreate">Name of action to create</param>
            <param name="targetKey">The GameObject/ActionList to create actions for</param>
        </member>
        <member name="M:FieaGameEngine.ActionCreateAction.ToString">
            <summary>
Returns a string that identifies this class.
Overridden function from RTTI.
</summary>
            <returns>A string that identifies this class</returns>
        </member>
        <member name="M:FieaGameEngine.ActionCreateAction.GetActionToCreate">
            <summary>
Returns a mutable reference of the name of the action to create
</summary>
            <returns>Returns a mutable reference of the name of the action to create</returns>
            <summary>
Returns a const reference of the name of the action to create
</summary>
            <returns>Returns a const reference of the name of the action to create</returns>
        </member>
        <member name="M:FieaGameEngine.ActionCreateAction.SetActionToCreate(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Set the action to that ActionCreateAction will create.
</summary>
            <param name="actionToCreate">Name of the action to create</param>
        </member>
        <member name="M:FieaGameEngine.ActionCreateAction.GetTarget">
            <summary>
Returns a mutable reference of the target path
</summary>
            <returns>Returns a mutable reference of the target path</returns>
            <summary>
Returns a const reference of the target path
</summary>
            <returns>Returns a const reference of the target path</returns>
        </member>
        <member name="M:FieaGameEngine.ActionCreateAction.SetTarget(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
REQUIRES SEARCH TO BE UPDATED TO TAKE A PATH TO THE TARGETKEY.
Set the path to a GameObject/ActionList as a target for this action to work on.
Will create an action on that target.
</summary>
            <param name="targetKey">Path to the GameObject/ActionList</param>
        </member>
        <member name="M:FieaGameEngine.ActionCreateAction.Equals(FieaGameEngine.RTTI!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Compares one GameObject with another.
Overridden function from RTTI.
</summary>
            <param name="rhs">The GameObject to compare against</param>
            <returns>
TRUE if the GameObject is equivalent.
FALSE if the GameObject is not equivalent
</returns>
        </member>
        <member name="M:FieaGameEngine.ActionCreateAction.Clone">
            <summary>
Clones the calling Action. Heap constructs this object and it's on the user to manage its memory.
Overridden function from Scope.
</summary>
            <returns>
A pointer to heap allocated clone of the calling Action.
</returns>
        </member>
        <member name="M:FieaGameEngine.ActionCreateAction.Register">
            <summary>
Macros is defined in TypeRegistry header file.
This is used to register this class with the TypeRegistry.
Will start a recursive call that will register all classes that are inherited.
</summary>
            <param name="">Derived Class</param>
            <param name="">Base Class</param>
        </member>
        <member name="T:FieaGameEngine.GameState">
            <summary>
Give the GameState class access to private member variables _actionsCreated
and private method GetActionsCreated
</summary>
            <summary>
Give the GameState class access to private member variables _actionsToDestroy
and private method GetActionsToDestroy
</summary>
            <summary>
A singleton that will be able to perform methods on the game for cases where a global action is required. 
</summary>
        </member>
        <member name="T:FieaGameEngine.ActionCreateAction">
            <summary>
Action will create another action and append it to the _actions of the owning GameObject
</summary>
        </member>
        <member name="T:FieaGameEngine.ActionListFactory">
            <summary>
Macro is defined in Factory header file
Will create a class that creates GameObjects and registers itself with the Factory Group. 
</summary>
            <param name="">Concrete to be made in the factory</param>
            <param name="">The group to which this concrete object belongs to. The base class designed to be the defining type for the group.</param>
        </member>
        <member name="M:FieaGameEngine.ActionList.#ctor(System.UInt32)">
            <summary>
Protected constructor that is implemented in inheriting Objects who need to pass on their TypeId to Attributed.
</summary>
            <param name="typeId">The derived classes TypeId</param>
        </member>
        <member name="M:FieaGameEngine.ActionList.Clear">
            <summary>
Clears all actions in the action list.
Review if this requires to qu the destruction of actions
</summary>
        </member>
        <member name="M:FieaGameEngine.ActionList.Register">
            <summary>
Macros is defined in TypeRegistry header file.
This is used to register this class with the TypeRegistry.
Will start a recursive call that will register all classes that are inherited.
</summary>
            <param name="">Derived Class</param>
            <param name="">Base Class</param>
        </member>
        <member name="M:FieaGameEngine.ActionList.Signatures">
            <summary>
Method is used for registering this types signatures and for classes that inherit from Action.
Used by TypeRegistry class
</summary>
            <returns>
This classes unique signatures.
</returns>
        </member>
        <member name="M:FieaGameEngine.ActionList.ToString">
            <summary>
Returns a string that identifies this class.
Overridden function from RTTI.
</summary>
            <returns>A string that identifies this class</returns>
        </member>
        <member name="M:FieaGameEngine.ActionList.Equals(FieaGameEngine.RTTI!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Compares one GameObject with another.
Overridden function from RTTI.
</summary>
            <param name="rhs">The GameObject to compare against</param>
            <returns>
TRUE if the GameObject is equivalent.
FALSE if the GameObject is not equivalent
</returns>
        </member>
        <member name="M:FieaGameEngine.ActionList.Clone">
            <summary>
Clones the calling Action. Heap constructs this object and it's on the user to manage its memory.
Overridden function from Scope.
</summary>
            <returns>
A pointer to heap allocated clone of the calling Action.
</returns>
        </member>
        <member name="M:FieaGameEngine.ActionList.Update(FieaGameEngine.GameState!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Will iterate through its list of actions and execute them sequentially.
</summary>
            <param name="gameTime">A reference to GameTime</param>
        </member>
        <member name="M:FieaGameEngine.Action.#ctor(System.UInt32)">
            <summary>
Protected constructor that is implemented in inheriting Actions who need to pass on their TypeId to Attributed.
</summary>
            <param name="typeId">The derived classes TypeId</param>
        </member>
        <member name="F:FieaGameEngine.Action._name">
            <summary>
The descriptor for the Action.
</summary>
        </member>
        <member name="M:FieaGameEngine.Action.Register">
            <summary>
Macros is defined in TypeRegistry header file.
This is used to register this class with the TypeRegistry.
Will start a recursive call that will register all classes that are inherited.
</summary>
            <param name="">Derived Class</param>
            <param name="">Base Class</param>
        </member>
        <member name="M:FieaGameEngine.Action.Signatures">
            <summary>
Method is used for registering this types signatures and for classes that inherit from GameObject.
Used by TypeRegistry class
</summary>
            <returns>
This classes unique signatures.
</returns>
        </member>
        <member name="M:FieaGameEngine.Action.SetName(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets the name of the action.
This name serves as a description of the action.
</summary>
            <param name="name">The description for the action.</param>
        </member>
        <member name="M:FieaGameEngine.Action.Equals(FieaGameEngine.RTTI!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Compares one Action with another.
Overridden function from RTTI.
</summary>
            <param name="rhs">The Action to compare against</param>
            <returns>
TRUE if the Action is equivalent.
FALSE if the Action is not equivalent
</returns>
        </member>
        <member name="M:FieaGameEngine.Action.ToString">
            <summary>
Returns a string that identifies this class.
Overridden function from RTTI.
</summary>
            <returns>A string that identifies this class</returns>
        </member>
        <member name="M:FieaGameEngine.Action.GetName">
            <summary>
Returns const reference of the actions name.
This name serves as a description of the action.
</summary>
            <returns>A const reference of the actions name.</returns>
            <summary>
Returns mutable reference of the actions name.
This name serves as a description of the action.
</summary>
            <returns>A mutable reference of the actions name.</returns>
        </member>
        <member name="M:FieaGameEngine.Action.Update(FieaGameEngine.GameState!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Derived actions will implement their unique Update method.
</summary>
            <param name="gameTime">A reference to the game time</param>
        </member>
        <member name="M:FieaGameEngine.Action.IsEnabled">
            <summary>
Returns true if the action is enabled.
Returns false if the action is disabled.
</summary>
            <returns>
Returns true if the action is enabled.
Returns false if the action is disabled.
</returns>
        </member>
        <member name="M:FieaGameEngine.Action.SetEnabled(System.Boolean)">
            <summary>
Will set if the action is enabled.
Used in the Update method to determine if the update will execute it's code
</summary>
            <param name="enable">bool to enable the action</param>
        </member>
        <member name="M:FieaGameEngine.Attributed.PopulatePrescribedAttributes(System.UInt32)">
            <summary>
Creates the mirroring scope structure of the class that inherits from Attributed.
</summary>
            <param name="typeId">The RTTI typeId of the class we are mirroring</param>
        </member>
        <member name="M:FieaGameEngine.Attributed.ToString">
            <summary>
String version of this class.
</summary>
            <returns>A string representation of this class.</returns>
        </member>
        <member name="M:FieaGameEngine.Attributed.ReAssignExternalAttributes(System.UInt32)">
            <summary>
Re-assigns the external attributes to point to the correct locations
</summary>
            <param name="typeId" />
        </member>
        <member name="M:FieaGameEngine.Attributed.IsAttributeInternal(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns a pair of type UnorderedMap::Iterator and boolean.
The UnorderedMap::Iterator is dereferenced to obtain a pointer to the datum (attribute) it points to.
The boolean is true if datum (attribute) is found. False if the datum (attribute) is not found.
</summary>
            <param name="name">The name of the attribute the we are searching for.</param>
            <returns>A pair of type UnorderedMap::Iterator and boolean.</returns>
        </member>
        <member name="M:FieaGameEngine.Attributed.op_Assign(FieaGameEngine.Attributed*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Move Assignment Operator
Moves data from one Attribute into another.
</summary>
            <param name="rhs">Attributed object we wish to move</param>
            <returns>A reference to itself</returns>
        </member>
        <member name="M:FieaGameEngine.Attributed.op_Assign(FieaGameEngine.Attributed!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Copy Assignment Operator
Copies an Attributed object.
</summary>
            <param name="rhs">The Attributed object we wish to copy.</param>
            <returns>A reference to itself</returns>
        </member>
        <member name="M:FieaGameEngine.Attributed.#ctor(FieaGameEngine.Attributed*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Move Constructor
Moves data from one Attribute into another.
</summary>
            <param name="rhs">Attributed object we wish to move</param>
        </member>
        <member name="M:FieaGameEngine.Attributed.#ctor(FieaGameEngine.Attributed!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
virtual delete so that polymorphic destruction can invoke inherited destructor
</summary>
            <summary>
Copy Constructor
Creates a copy of an Attributed object
</summary>
            <param name="rhs">Reference to an attribute we wish to copy</param>
        </member>
        <member name="M:FieaGameEngine.Attributed.#ctor(System.UInt32)">
            <summary>
TypeCast Constructor
Class is meant to be inherited from.
Inheriting class passes its TypeId so that Attributed can perform calls to the TypeRegistry and construct mirroring scope structure.
</summary>
            <param name="typeId">Inheriting class TypeId</param>
        </member>
        <member name="M:FieaGameEngine.Attributed.Register">
            <summary>
Will be called to register this class with the type registry. 
There is a macro within the the TypeRegistry header file that should be applied to all classes that derive from Attributed.
</summary>
        </member>
        <member name="M:FieaGameEngine.Attributed.Signatures">
            <summary>
Generates a list of signatures that represent the Attributes of the object that inherits from this class.
</summary>
            <returns>A list of signatures</returns>
        </member>
        <member name="M:FieaGameEngine.Attributed.AppendAuxiliaryAttribute(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Adds an attribute that is not prescribed into our mirroring scope structure.
If an attribute with the name passed into the parameter already exists then no attribute is appended and instead a reference to that already existing attribute is returned.
</summary>
            <param name="name">The name of the attribute that we wish to add to our mirroring scope structure</param>
            <returns>
A reference to a newly appended attribute OR if already existing then a referencer to that one.
</returns>
        </member>
        <member name="M:FieaGameEngine.Attributed.IsAuxilaryAttribute(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Checks to see if a attribute of our mirroring scope structure is not prescribed. That it is not part of the standard structure for the object.
</summary>
            <param name="name">A string, a name, that we are inquiring if it is an auxiliary attribute of our mirroring scope structure.</param>
            <returns>
True if a attribute with a matching name is found within the mirroring scope structure AND it is not a prescribed attribute.
False if a attribute is not found with the name AND/OR if it is prescribed attribute.
</returns>
        </member>
        <member name="M:FieaGameEngine.Attributed.IsAttribute(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Takes a string and checks if it is a attribute of our mirroring scope structure.
</summary>
            <param name="name">A string, a name, that we are inquiring if it belongs to a attribute of our mirroring scope structure.</param>
            <returns>
True if a attribute exists within our mirroring scope structure that has the same name.
False if a no attribute with the name exists in our mirroring scope structure.
</returns>
        </member>
        <member name="M:FieaGameEngine.Attributed.IsPrescribedAttribute(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Takes a string and checks if it belongs to an attribute that is prescribed to our mirroring scope structure.
</summary>
            <param name="name">A string, a name, that we are inquiring if it belongs to a prescribed attribute of our mirroring scope structure.</param>
            <returns>
True if a attribute exists within our mirroring scope structure that has the same name AND is prescribed.
False if a no attribute with the name exists in our mirroring scope structure AND/OR if it is not prescribed.
</returns>
        </member>
        <member name="M:FieaGameEngine.TypeRegistry.RegisterTypeInformation(System.UInt32,FieaGameEngine.Vector&lt;FieaGameEngine.Signature&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Holds TypeId and Vector of type Signature pairs.
Container that holds lists of prescribed members for each class.
Is used to create mirroring scopes structures of classes.
</summary>
            <summary>
Places key and data into the UnorderedMap.
This will associate a classes ID with it's list of prescribed members.
</summary>
            <param name="typeId">A classes unique identifier</param>
            <param name="signatures">A list of signatures that describe the data layout of the class.</param>
        </member>
        <member name="M:FieaGameEngine.TypeRegistry.GetSignatures(System.UInt32)">
            <summary>
Retrieves a reference to a Vector of type Signature for the type.
This information represented the prescribed members of the type.
</summary>
            <param name="typeId">The identifier and key required to search the Unordered map for it's associated data, being the Vector of type Signature.</param>
            <returns>
A reference to a Vector Signature containing the information of the prescribed members of the associated class.
</returns>
        </member>
        <member name="T:FieaGameEngine.Attributed">
            <summary>
Used for accessing the method RegisterAttributedBaseClass();
</summary>
            <summary>
Allows us to create dynamic data structures at run-time that represents the inheriting structure.
Creates the “schema” at compile-time, to mirror native classes.
Does not support the event where a parent and a child or any derived class has an attribute of the same. All Attribute names must be unique.
</summary>
        </member>
        <member name="T:FieaGameEngine.TypeRegistry">
            <summary>
A singleton that contains a list of signatures for each class that our engine will use.
Any new classes that our engine will work with and are derived from Scope-Attribute must be registered with the TypeRegistry
</summary>
        </member>
        <member name="T:FieaGameEngine.Signature">
            <summary>
A struct that contains the data required for our internal scope to mirror one element of data of the class it is being derived from.
</summary>
        </member>
        <member name="M:FieaGameEngine.Scope.At(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
If working in confidence that a value exists within the scope then this can be used to located and retrieve that value.
</summary>
            <param name="string">The key of the value found in the Scopes hash map</param>
            <returns>A mutable reference to the value found in the Scope</returns>
            <summary>
If working in confidence that a value exists within the scope then this can be used to located and retrieve that value.
</summary>
            <param name="string">The key of the value found in the Scopes hash map</param>
            <returns>A mutable reference to the value found in the Scope</returns>
        </member>
        <member name="M:FieaGameEngine.Scope.IsDescendantOf(FieaGameEngine.Scope!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Determines if the scope passed in is a descendant of the scope calling the method.
</summary>
            <param name="scope">The scope that may be a descendant of the calling scope</param>
            <returns>
True if the scope passed in is a descendant of the scope calling this method.
False if the scope passed in is NOT a descendant of the scope calling this method. This may also mean it is no way related to the scope.
</returns>
        </member>
        <member name="M:FieaGameEngine.Scope.IsAncestorOf(FieaGameEngine.Scope!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Determines if the scope passed in is an ancestor of the scope calling the method.
</summary>
            <param name="scope">The scope that may be the ancestor of the calling scope</param>
            <returns>
True if the scope passed in is an ancestor of the scope calling this method.
False if the scope passed in is NOT an ancestor of the scope calling this method. This may also mean it is no way related to the scope.
</returns>
        </member>
        <member name="M:FieaGameEngine.Scope.LoadFactorPercentage">
            <summary>
The Scope stores data in a hash map. This returns the load factor of that hash map.
</summary>
            <returns />
            <summary>
Returns a percentage value that represents the load factor of the map
</summary>
            <returns>Returns a float type that represents the load factor of the map as a percentage.</returns>
        </member>
        <member name="M:FieaGameEngine.Scope.ReHashMap(System.UInt32)">
            <summary>
The Scope stores data in a hash map. If the scopes hash map were to a high load factor the user may want to rehash their map to a larger size.
</summary>
            <param name="size">The number of buckets that the scopes hashmap will have.</param>
        </member>
        <member name="M:FieaGameEngine.Scope.NumberOfBuckets">
            <summary>
Returns the number of buckets that a scope has in its hash map.
</summary>
            <returns>
Number of buckets that this scope has in its hash map.
</returns>
        </member>
        <member name="M:FieaGameEngine.Scope.NumberOfItems">
            <summary>
Returns the number of items in the scope.
</summary>
            <returns>
Number of items in the scope.
</returns>
        </member>
        <member name="M:FieaGameEngine.Scope.Clone">
            <summary>
Creates a heap allocated copy of the Scope.
Users responsibility to have this scope adopted into a scope that will call delete it on it. Or the user must exlicitly delete.
</summary>
            <returns>
A reference to a heap allocated copy of the Scope.
</returns>
        </member>
        <member name="M:FieaGameEngine.Scope.FindContainedScope(FieaGameEngine.Scope!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Performs a local search of the Scope passed in.
</summary>
            <param name="scope"> Scope to look for within calling Scope.</param>
            <returns>
A pair of Datum Pointer and std::size_t (index)
Datum Pointer contains a pointer to the datum that contains the Scope.
If the Scope is not found then it returns nullptr.
std::size_t the index where the scope is found within the datum returned.
If the Scope is not found the std::size_t index is 0.
</returns>
            <summary>
Performs a local search of the Scope passed in.
</summary>
            <param name="scope"> Scope to look for within calling Scope.</param>
            <returns>
A pair of Datum Pointer and std::size_t (index)
Datum Pointer contains a pointer to a const datum that contains the Scope.
If the Scope is not found then it returns nullptr.
std::size_t the index where the scope is found within the datum returned.
If the Scope is not found the std::size_t index is 0.
</returns>
        </member>
        <member name="M:FieaGameEngine.Scope.Orphan">
            <summary>
Removes scope from parent.
Makes sure no reference of scope is found in parent.
User must delete this scope OR adopt it into a scope that will call delete on it.
</summary>
            <returns>
A pair of Scope Reference and bool.
Scope Reference is a reference to itself
bool is true if it was removed from a parent. 
bool is false if there was no parent to remove this scope from.
</returns>
        </member>
        <member name="M:FieaGameEngine.Scope.Equals(FieaGameEngine.RTTI!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Virtual method from base class RTTI.
For Scope it performs the operator== method. Compares scopes.
</summary>
            <param name="rhs">A base class pointer that in this case will be a pointer to Scope.</param>
            <returns>
Returns true if scopes contain the same items and if the items are equal.
Returns false if scope does not contain the same number of items and/or if items are not equal.
</returns>
        </member>
        <member name="M:FieaGameEngine.Scope.op_Inequality(FieaGameEngine.Scope!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Compares one scope to another.
Returns true if is scope is NOT equal.
Scope is considered NOT equal if they don't contain the same number of items and/or if the items are not equivalent regardless of order.
</summary>
            <param name="rhs">The scope we wish to compare against.</param>
            <returns>
Returns true if scope does not contain the same number of items and/or if items are not equal.
Returns false if scopes contain the same items and if the items are equal.
</returns>
        </member>
        <member name="M:FieaGameEngine.Scope.op_Equality(FieaGameEngine.Scope!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Compares one scope to another.
Returns true if is scope is equal and all nested scopes are equal. 
Scope is considered equal if they contain the same number of items and if the items are equivalent regardless of order.
</summary>
            <param name="rhs">The scope we wish to compare against.</param>
            <returns>
Returns true if scopes contain the same items and if the items are equal.
Returns false if scope does not contain the same number of items and/or if items are not equal.
</returns>
        </member>
        <member name="M:FieaGameEngine.Scope.op_Subscript(System.UInt32)">
            <summary>
Retrieves a reference to the datum found at the index.
</summary>
            <param name="index">A number associated with the order in which items were placed into the Scope</param>
            <returns>
A mutable reference to the datum found at the index
</returns>
            <summary>
Retrieves a reference to the datum found at the index.
</summary>
            <param name="index">A number associated with the order in which items were placed into the Scope</param>
            <returns>
A const reference to the datum found at the index
</returns>
        </member>
        <member name="M:FieaGameEngine.Scope.op_Subscript(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Takes a string name and attempts to insert a pair of string datum where the datum is defaulted into the Scope. 
If pair exists with the name passed into the parameter it will return a reference to the datum associated with the name.
If this is a unique name then it will return a reference to the defaulted datum associated with the name and update the order vector.
</summary>
            <param name="name">This is the name we wish to append into our scope.</param>
            <returns>
If name already exists nothing is appended and a reference to the data associated with the name is returned.
Returns a referenced to a newly created and defaulted datum that's associated with the newly inserted name.
</returns>
        </member>
        <member name="M:FieaGameEngine.Scope.GetParent">
            <summary>
Returns a pointer to the parent of the scope. If one does not exist it returns nullptr.
</summary>
            <returns>
If scope has a parent then it returns a valid pointer to the parent.
If scope has NO parent then it returns nullptr.
</returns>
        </member>
        <member name="M:FieaGameEngine.Scope.Adopt(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,FieaGameEngine.Scope*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
 Adopts a scope into another scope.
</summary>
            <param name="name">A string (the name of key for the Datum to use for storing the child)</param>
            <param name="scope">A reference to a Scope (the child to adopt)</param>
        </member>
        <member name="M:FieaGameEngine.Scope.AppendScope(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Takes a constant string and returns a reference to a Scope with the associated name.
If scope does not exist then one is created. Otherwise returns reference to one found.
</summary>
            <param name="name">Name associated with the scope we are attemptign to append into the scope.</param>
            <returns>
A reference to scope created/found.
</returns>
        </member>
        <member name="M:FieaGameEngine.Scope.Append(std.pair&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst,FieaGameEngine.Datum&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Takes a pair of (string, datum). Attempts to insert a pair into the scope.
If this is a unique pair with it's name then it will return a reference to the datum that was passed in and stored in the scope.
</summary>
            <param name="pair">pair of (string, datum)</param>
            <returns>
If pairs string name already exists nothing is appended and a reference to the data associated with the name is returned.
Returns a referenced to a newly created and defaulted datum that's associated with the newly inserted name.
</returns>
        </member>
        <member name="M:FieaGameEngine.Scope.Append(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,FieaGameEngine.Datum*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Takes a string name and datum. Attempts to insert a pair of string datum where the datum the one passed in to the method. 
If pair exists with the name passed into the parameter it will return a reference to the datum associated with the name.
If this is a unique name then it will return a reference to the datum that was passed in and stored in the scope.
</summary>
            <param name="name">This is the name we wish to append into our scope.</param>
            <param name="Datum">This is the datum that we wish to insert into the scope.</param>
            <returns>
If name already exists nothing is appended and a reference to the data associated with the name is returned.
Returns a referenced to a newly created and defaulted datum that's associated with the newly inserted name.
</returns>
        </member>
        <member name="M:FieaGameEngine.Scope.Append(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Takes a string name and attempts to insert a pair of string datum where the datum is defaulted into the Scope. 
If pair exists with the name passed into the parameter it will return a reference to the datum associated with the name.
If this is a unique name then it will return a reference to the defaulted datum associated with the name and update the order vector.
</summary>
            <param name="name">This is the name we wish to append into our scope.</param>
            <returns>
If name already exists nothing is appended and a reference to the data associated with the name is returned.
Returns a referenced to a newly created and defaulted datum that's associated with the newly inserted name.
</returns>
        </member>
        <member name="M:FieaGameEngine.Scope.SearchUp(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Searches UP the hierarchy of scope for a datum associated with the name passed in.
</summary>
            <param name="name">he name of the (name, datum) pair we are looking for.</param>
            <returns>
IF FOUND: Method returns a valid pointer to a mutable datum within the Scope with the associated name.
IF NOT FOUND: Method returns a nullptr.
</returns>
            <summary>
Searches UP the hierarchy of scope for a datum associated with the name passed in. Returns back the first datum found with the associated name.
</summary>
            <param name="name">he name of the (name, datum) pair we are looking for.</param>
            <returns>
IF FOUND: Method returns a valid pointer to a const datum within the Scope with the associated name.
IF NOT FOUND: Method returns a nullptr.
</returns>
        </member>
        <member name="M:FieaGameEngine.Scope.SearchUp(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,FieaGameEngine.Scope!System.Runtime.CompilerServices.IsConst**)">
            <summary>
Searches UP the hierarchy of scope for a datum associated with the name passed in. Returns back the first datum found with the associated name.
</summary>
            <param name="name">he name of the (name, datum) pair we are looking for.</param>
            <param name="foundInScope">A pointer to a pointer. This will point to the Scope POINTER that has our found datum.</param>
            <returns>
IF FOUND: Passed in parameter foundInScope will return a valid pointer to the pointer of a scope that holds the found datum.
IF FOUND: Method returns a valid pointer to a const datum within the Scope with the associated name.
IF NOT FOUND: Passed in parameter foundInScope will contain nullptr;
IF NOT FOUND: Method returns a nullptr.
</returns>
        </member>
        <member name="M:FieaGameEngine.Scope.SearchUp(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,FieaGameEngine.Scope**)">
            <summary>
Searches UP the hierarchy of scope for a datum associated with the name passed in. Returns back the first datum found with the associated name.
</summary>
            <param name="name">he name of the (name, datum) pair we are looking for.</param>
            <param name="foundInScope">A pointer to a pointer. This will point to the Scope POINTER that has our found datum.</param>
            <returns>
IF FOUND: Passed in parameter foundInScope will return a valid pointer to the pointer of a scope that holds the found datum.
IF FOUND: Method returns a valid pointer to a mutable datum within the Scope with the associated name.
IF NOT FOUND: Passed in parameter foundInScope will contain nullptr;
IF NOT FOUND: Method returns a nullptr.
</returns>
        </member>
        <member name="M:FieaGameEngine.Scope.SearchDown(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Searches DOWN the hierarchy of scope for a datum associated with the name passed in.
</summary>
            <param name="name">he name of the (name, datum) pair we are looking for.</param>
            <returns>
IF FOUND: Method returns a valid pointer to a mutable datum within the Scope with the associated name.
IF NOT FOUND: Method returns a nullptr.
</returns>
            <summary>
Searches DOWN the hierarchy of scope for a datum associated with the name passed in. Returns back the first datum found with the associated name.
</summary>
            <param name="name">he name of the (name, datum) pair we are looking for.</param>
            <returns>
IF FOUND: Method returns a valid pointer to a const datum within the Scope with the associated name.
IF NOT FOUND: Method returns a nullptr.
</returns>
        </member>
        <member name="M:FieaGameEngine.Scope.SearchDown(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,FieaGameEngine.Scope!System.Runtime.CompilerServices.IsConst**)">
            <summary>
Searches DOWN the hierarchy of scope for a datum associated with the name passed in. Returns back the first datum found with the associated name.
</summary>
            <param name="name">he name of the (name, datum) pair we are looking for.</param>
            <param name="foundInScope">A pointer to a pointer. This will point to the Scope POINTER that has our found datum.</param>
            <returns>
IF FOUND: Passed in parameter foundInScope will return a valid pointer to the pointer of a scope that holds the found datum.
IF FOUND: Method returns a valid pointer to a const datum within the Scope with the associated name.
IF NOT FOUND: Passed in parameter foundInScope will contain nullptr;
IF NOT FOUND: Method returns a nullptr.
</returns>
        </member>
        <member name="M:FieaGameEngine.Scope.SearchDown(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,FieaGameEngine.Scope**)">
            <summary>
Searches DOWN the hierarchy of scope for a datum associated with the name passed in. Returns back the first datum found with the associated name.
</summary>
            <param name="name">he name of the (name, datum) pair we are looking for.</param>
            <param name="foundInScope">A pointer to a pointer. This will point to the Scope POINTER that has our found datum.</param>
            <returns>
IF FOUND: Passed in parameter foundInScope will return a valid pointer to the pointer of a scope that holds the found datum.
IF FOUND: Method returns a valid pointer to a mutable datum within the Scope with the associated name.
IF NOT FOUND: Passed in parameter foundInScope will contain nullptr;
IF NOT FOUND: Method returns a nullptr.
</returns>
        </member>
        <member name="M:FieaGameEngine.Scope.Find(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Performs a local search in the Scope. 
Finds a Datum with the associated name passed into the method. 
</summary>
            <param name="name">The name of the (name, datum) pair we are looking for.</param>
            <returns>
If found returns a valid pointer to a mutable datum within the Scope with the associated name.
If NOT found returns nullptr.
</returns>
            <summary>
Performs a local search in the Scope. 
Finds a Datum with the associated name passed into the method. 
</summary>
            <param name="name">The name of the (name, datum) pair we are looking for.</param>
            <returns>
If found returns a valid pointer to a CONST datum within the Scope with the associated name.
If NOT found returns nullptr.
</returns>
        </member>
        <member name="M:FieaGameEngine.Scope.Clear">
            <summary>
Will remove all content from the scope and all nested scopes.
</summary>
        </member>
        <member name="M:FieaGameEngine.Scope.op_Assign(FieaGameEngine.Scope*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Move Assignment
Clears itself of current held data.
Takes the contents of the rhs and takes ownership of heap allocated data and shallow copies data. Zeros out passed in Scope.
</summary>
            <param name="rhs">A rvalue reference to a scope whose ownership will be handled by the constructing scope</param>
            <returns>
A reference to itself.
</returns>
        </member>
        <member name="M:FieaGameEngine.Scope.#ctor(FieaGameEngine.Scope*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Move Constructor.
Takes the contents of the rhs and takes ownership of heap allocated data and shallows copies data. Zeros out passed in Scope.
</summary>
            <param name="rhs">A rvalue reference to a scope whose ownership will be handled by the constructing scope</param>
        </member>
        <member name="M:FieaGameEngine.Scope.op_Assign(FieaGameEngine.Scope!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
OO Assignment
Will make a copy of the Scope passed in.
</summary>
            <param name="rhs">A reference to a scope that we wish to copy</param>
            <returns>
A reference to itself
</returns>
        </member>
        <member name="M:FieaGameEngine.Scope.#ctor(FieaGameEngine.Scope!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Copy Constructor
Recursively creates the scope and all scopes associated with the passed in parameter.
</summary>
            <param name="rhs">A scope whos contents will be copied.</param>
        </member>
        <member name="M:FieaGameEngine.Scope.#ctor(std.initializer_list&lt;std.pair&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst,FieaGameEngine.Datum&gt;**&gt;)">
            <summary>
Appends a pair of type string and datum
If any of the names repeat in the pairs then it will insert the first pair in the list with the name and ignore the others.
</summary>
            <param name="list">pairs of string datum</param>
        </member>
        <member name="M:FieaGameEngine.Scope.#ctor(System.UInt32)">
            <summary>
Typecast Constructor
Sets the capacity of the _UMap and _orderVector
Sets the parentScope to nullptr;
</summary>
            <param name="size" />
        </member>
        <member name="M:FieaGameEngine.Datum.#ctor(FieaGameEngine.Scope*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Typecast constructor that takes in a value of type RTTI* and sets size and capacity to 1.
</summary>
            <param name="value">value to be first element in Datum</param>f
</member>
        <member name="M:FieaGameEngine.Datum.#ctor(FieaGameEngine.RTTI*!System.Runtime.CompilerServices.IsConst)">
            <summary>
Typecast constructor that takes in a value of type RTTI* and sets size and capacity to 1.
</summary>
            <param name="value">value to be first element in Datum</param>
        </member>
        <member name="M:FieaGameEngine.Datum.#ctor(glm.mat&lt;0x4,0x4,System.Single,glm::packed_highp&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Typecast constructor that takes in a value of type glm::mat4 and sets size and capacity to 1.
</summary>
            <param name="value">value to be first element in Datum</param>
        </member>
        <member name="M:FieaGameEngine.Datum.#ctor(glm.vec&lt;0x4,System.Single,glm::packed_highp&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Typecast constructor that takes in a value of type glm::vec4 and sets size and capacity to 1.
</summary>
            <param name="value">value to be first element in Datum</param>
        </member>
        <member name="M:FieaGameEngine.Datum.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Typecast constructor that takes in a value of type std::string and sets size and capacity to 1.
</summary>
            <param name="value">value to be first element in Datum</param>
        </member>
        <member name="M:FieaGameEngine.Datum.#ctor(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Typecast constructor that takes in a value of type float and sets size and capacity to 1.
</summary>
            <param name="value">value to be first element in Datum</param>
        </member>
        <member name="M:FieaGameEngine.Datum.#ctor(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Typecast constructor that takes in a value of type int32_t and sets size and capacity to 1.
</summary>
            <param name="value">value to be first element in Datum</param>
        </member>
        <member name="M:FieaGameEngine.Datum.#ctor(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Typecast constructor that takes in a value of type int32_t and sets size and capacity to 1.
</summary>
            <param name="value">value to be first element in Datum</param>
        </member>
        <member name="M:FieaGameEngine.Datum.IsDataSet">
            <summary>
Returns true if the data is NOT set to nullptr. 
False if the data is pointing to nullptr.
</summary>
            <returns>
Returns true if the data is NOT set to nullptr. 
False if the data is pointing to nullptr.
</returns>
        </member>
        <member name="M:FieaGameEngine.Datum.IsExternal">
            <summary>
Returns true if the data is external. 
False if the data is internal.
</summary>
            <returns>
Returns true if the data is external. 
False if the data is internal.
</returns>
        </member>
        <member name="M:FieaGameEngine.Datum.#ctor(FieaGameEngine.DatumTypes,System.UInt32)">
            <summary>
Constructor -Type - Size
Default constructs Size number of type values in the Datum.
</summary>
            <param name="type">Type to set the Datum to.</param>
            <param name="size">Number of elements to default construct</param>
        </member>
        <member name="M:FieaGameEngine.Datum.IsEmpty">
            <summary>
Checks if the datum is empty by checking size.
</summary>
            <returns>
True if the Datum is empty.
False if the Datum is NOT empty.
</returns>
        </member>
        <member name="M:FieaGameEngine.Datum.ShrinkToFit">
            <summary>
Removes excess capacity from a Datum and makes size and capacity equal.
</summary>
        </member>
        <member name="M:FieaGameEngine.Datum.Capacity">
            <summary>
Returns the capacity of the Datum
</summary>
            <returns>a size_t that refers the capacity of the Datum</returns>
        </member>
        <member name="M:FieaGameEngine.Datum.Find(FieaGameEngine.Scope!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Finds the passed in value in the Datum and returns an index to the position found.
If NOT found the returned value will be equal to SIZE.
</summary>
            <param name="value">Valud to find in the Datum</param>
            <returns>
A std::pair with a pointer to a mutable type found in the datum and the index where it was found.
If NOT FOUND then the pointer is nullptr and the index is 0.
</returns>
            <summary>
Finds the passed in value in the Datum and returns an index to the position found.
If NOT found the returned value will be equal to SIZE.
</summary>
            <param name="value">Valud to find in the Datum</param>
            <returns>
A std::pair with a pointer to a const type found in the datum and the index where it was found.
If NOT FOUND then the pointer is nullptr and the index is 0.
</returns>
        </member>
        <member name="M:FieaGameEngine.Datum.Find(FieaGameEngine.RTTI!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Finds the passed in value in the Datum and returns an index to the position found.
If NOT found the returned value will be equal to SIZE.
</summary>
            <param name="value">Valud to find in the Datum</param>
            <returns>
A std::pair with a pointer to a mutable type found in the datum and the index where it was found.
If NOT FOUND then the pointer is nullptr and the index is 0.
</returns>
            <summary>
Finds the passed in value in the Datum and returns an index to the position found.
If NOT found the returned value will be equal to SIZE.
</summary>
            <param name="value">Valud to find in the Datum</param>
            <returns>
A std::pair with a pointer to a const type found in the datum and the index where it was found.
If NOT FOUND then the pointer is nullptr and the index is 0.
</returns>
        </member>
        <member name="M:FieaGameEngine.Datum.Find(glm.mat&lt;0x4,0x4,System.Single,glm::packed_highp&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Finds the passed in value in the Datum and returns an index to the position found.
If NOT found the returned value will be equal to SIZE.
</summary>
            <param name="value">Valud to find in the Datum</param>
            <returns>
A std::pair with a pointer to a mutable type found in the datum and the index where it was found.
If NOT FOUND then the pointer is nullptr and the index is 0.
</returns>
            <summary>
Finds the passed in value in the Datum and returns an index to the position found.
If NOT found the returned value will be equal to SIZE.
</summary>
            <param name="value">Valud to find in the Datum</param>
            <returns>
A std::pair with a pointer to a const type found in the datum and the index where it was found.
If NOT FOUND then the pointer is nullptr and the index is 0.
</returns>
        </member>
        <member name="M:FieaGameEngine.Datum.Find(glm.vec&lt;0x4,System.Single,glm::packed_highp&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Finds the passed in value in the Datum and returns an index to the position found.
If NOT found the returned value will be equal to SIZE.
</summary>
            <param name="value">Valud to find in the Datum</param>
            <returns>
A std::pair with a pointer to a mutable type found in the datum and the index where it was found.
If NOT FOUND then the pointer is nullptr and the index is 0.
</returns>
            <summary>
Finds the passed in value in the Datum and returns an index to the position found.
If NOT found the returned value will be equal to SIZE.
</summary>
            <param name="value">Valud to find in the Datum</param>
            <returns>
A std::pair with a pointer to a const type found in the datum and the index where it was found.
If NOT FOUND then the pointer is nullptr and the index is 0.
</returns>
        </member>
        <member name="M:FieaGameEngine.Datum.Find(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Finds the passed in value in the Datum and returns an index to the position found.
If NOT found the returned value will be equal to SIZE.
</summary>
            <param name="value">Valud to find in the Datum</param>
            <returns>
A std::pair with a pointer to a mutable type found in the datum and the index where it was found.
If NOT FOUND then the pointer is nullptr and the index is 0.
</returns>
            <summary>
Finds the passed in value in the Datum and returns an index to the position found.
If NOT found the returned value will be equal to SIZE.
</summary>
            <param name="value">Valud to find in the Datum</param>
            <returns>
A std::pair with a pointer to a const type found in the datum and the index where it was found.
If NOT FOUND then the pointer is nullptr and the index is 0.
</returns>
        </member>
        <member name="M:FieaGameEngine.Datum.Find(System.Single)">
            <summary>
Finds the passed in value in the Datum and returns an index to the position found.
If NOT found the returned value will be equal to SIZE.
</summary>
            <param name="value">Valud to find in the Datum</param>
            <returns>
A std::pair with a pointer to a mutable type found in the datum and the index where it was found.
If NOT FOUND then the pointer is nullptr and the index is 0.
</returns>
            <summary>
Finds the passed in value in the Datum and returns an index to the position found.
If NOT found the returned value will be equal to SIZE.
</summary>
            <param name="value">Valud to find in the Datum</param>
            <returns>
A std::pair with a pointer to a const type found in the datum and the index where it was found.
If NOT FOUND then the pointer is nullptr and the index is 0.
</returns>
        </member>
        <member name="M:FieaGameEngine.Datum.Find(System.Boolean)">
            <summary>
Finds the passed in value in the Datum and returns an index to the position found.
If NOT found the returned value will be equal to SIZE.
</summary>
            <param name="value">Valud to find in the Datum</param>
            <returns>
A std::pair with a pointer to a mutable type found in the datum and the index where it was found.
If NOT FOUND then the pointer is nullptr and the index is 0.
</returns>
            <summary>
Finds the passed in value in the Datum and returns an index to the position found.
If NOT found the returned value will be equal to SIZE.
</summary>
            <param name="value">Valud to find in the Datum</param>
            <returns>
A std::pair with a pointer to a const type found in the datum and the index where it was found.
If NOT FOUND then the pointer is nullptr and the index is 0.
</returns>
        </member>
        <member name="M:FieaGameEngine.Datum.Find(System.Int32)">
            <summary>
Finds the passed in value in the Datum and returns an index to the position found.
If NOT found the returned value will be equal to SIZE.
</summary>
            <param name="value">Valud to find in the Datum</param>
            <returns>
A std::pair with a pointer to a mutable type found in the datum and the index where it was found.
If NOT FOUND then the pointer is nullptr and the index is 0.
</returns>
            <summary>
Finds the passed in value in the Datum and returns an index to the position found.
If NOT found the returned value will be equal to SIZE.
</summary>
            <param name="value">Valud to find in the Datum</param>
            <returns>
A std::pair with a pointer to a const type found in the datum and the index where it was found.
If NOT FOUND then the pointer is nullptr and the index is 0.
</returns>
        </member>
        <member name="M:FieaGameEngine.Datum.RemoveAt(System.UInt32)">
            <summary>
Removes an element at a certain index in the Datum.
</summary>
            <param name="index">index where element will be removed from</param>
        </member>
        <member name="M:FieaGameEngine.Datum.Remove(FieaGameEngine.Scope*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Find the first element that matched the type passed in and removes it from Datum.
</summary>
            <param name="value">Value to search for and remove from the Datum.</param>
        </member>
        <member name="M:FieaGameEngine.Datum.Remove(FieaGameEngine.RTTI**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Find the first element that matched the type passed in and removes it from Datum.
</summary>
            <param name="value">Value to search for and remove from the Datum.</param>
        </member>
        <member name="M:FieaGameEngine.Datum.Remove(glm.mat&lt;0x4,0x4,System.Single,glm::packed_highp&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Find the first element that matched the type passed in and removes it from Datum.
</summary>
            <param name="value">Value to search for and remove from the Datum.</param>
        </member>
        <member name="M:FieaGameEngine.Datum.Remove(glm.vec&lt;0x4,System.Single,glm::packed_highp&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Find the first element that matched the type passed in and removes it from Datum.
</summary>
            <param name="value">Value to search for and remove from the Datum.</param>
        </member>
        <member name="M:FieaGameEngine.Datum.Remove(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Find the first element that matched the type passed in and removes it from Datum.
</summary>
            <param name="value">Value to search for and remove from the Datum.</param>
        </member>
        <member name="M:FieaGameEngine.Datum.Remove(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Find the first element that matched the type passed in and removes it from Datum.
</summary>
            <param name="value">Value to search for and remove from the Datum.</param>
        </member>
        <member name="M:FieaGameEngine.Datum.Remove(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Find the first element that matched the type passed in and removes it from Datum.
</summary>
            <param name="value">Value to search for and remove from the Datum.</param>
        </member>
        <member name="M:FieaGameEngine.Datum.Remove(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Find the first element that matched the type passed in and removes it from Datum.
</summary>
            <param name="value">Value to search for and remove from the Datum.</param>
        </member>
        <member name="M:FieaGameEngine.Datum.PopBack">
            <summary>
removes the last element in the Datum.
</summary>
        </member>
        <member name="M:FieaGameEngine.Datum.PushBack(FieaGameEngine.RTTI*)">
            <summary>
Passed in value will be set to the end of the datum.
</summary>
            <param name="value">value that is set to the end of the Datum</param>
        </member>
        <member name="M:FieaGameEngine.Datum.PushBack(glm.mat&lt;0x4,0x4,System.Single,glm::packed_highp&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Passed in value will be set to the end of the datum.
</summary>
            <param name="value">value that is set to the end of the Datum</param>
        </member>
        <member name="M:FieaGameEngine.Datum.PushBack(glm.vec&lt;0x4,System.Single,glm::packed_highp&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Passed in value will be set to the end of the datum.
</summary>
            <param name="value">value that is set to the end of the Datum</param>
        </member>
        <member name="M:FieaGameEngine.Datum.PushBack(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Passed in value will be set to the end of the datum.
</summary>
            <param name="value">value that is set to the end of the Datum</param>
        </member>
        <member name="M:FieaGameEngine.Datum.PushBack(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Passed in value will be set to the end of the datum.
</summary>
            <param name="value">value that is set to the end of the Datum</param>
        </member>
        <member name="M:FieaGameEngine.Datum.PushBack(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Passed in value will be set to the end of the datum.
</summary>
            <param name="value">value that is set to the end of the Datum</param>
        </member>
        <member name="M:FieaGameEngine.Datum.PushBack(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Passed in value will be set to the end of the datum.
</summary>
            <param name="value">value that is set to the end of the Datum</param>
        </member>
        <member name="M:FieaGameEngine.Datum.ToString(System.UInt32)">
            <summary>
Returns a string version of the data within Datum
</summary>
            <param name="index">The index of the datum pointing to a value we want to return as a string.</param>
            <returns>A string representation of the value</returns>
        </member>
        <member name="M:FieaGameEngine.Datum.PushBackFromString(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Passed in string value is parsed and converted to type 
</summary>
            <param name="str">string to be converted to the type we wish</param>
        </member>
        <member name="M:FieaGameEngine.Datum.SetFromString(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
            <summary>
Passed in string value is parsed and converted to type 
</summary>
            <param name="str" />
            <param name="index" />
        </member>
        <member name="M:FieaGameEngine.Datum.Set(FieaGameEngine.RTTI**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst)">
            <summary>
Sets an index of the datum to the value passed in.
</summary>
            <param name="value">The value that you wish to set at the datum index</param>
            <param name="index">The position in the datum you wish to change</param>
        </member>
        <member name="M:FieaGameEngine.Datum.Set(glm.mat&lt;0x4,0x4,System.Single,glm::packed_highp&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst)">
            <summary>
Sets an index of the datum to the value passed in.
</summary>
            <param name="value">The value that you wish to set at the datum index</param>
            <param name="index">The position in the datum you wish to change</param>
        </member>
        <member name="M:FieaGameEngine.Datum.Set(glm.vec&lt;0x4,System.Single,glm::packed_highp&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst)">
            <summary>
Sets an index of the datum to the value passed in.
</summary>
            <param name="value">The value that you wish to set at the datum index</param>
            <param name="index">The position in the datum you wish to change</param>
        </member>
        <member name="M:FieaGameEngine.Datum.Set(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst)">
            <summary>
Sets an index of the datum to the value passed in.
</summary>
            <param name="value">The value that you wish to set at the datum index</param>
            <param name="index">The position in the datum you wish to change</param>
        </member>
        <member name="M:FieaGameEngine.Datum.Set(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst)">
            <summary>
Sets an index of the datum to the value passed in.
</summary>
            <param name="value">The value that you wish to set at the datum index</param>
            <param name="index">The position in the datum you wish to change</param>
        </member>
        <member name="M:FieaGameEngine.Datum.Set(System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst)">
            <summary>
Sets an index of the datum to the value passed in.
</summary>
            <param name="value">The value that you wish to set at the datum index</param>
            <param name="index">The position in the datum you wish to change</param>
        </member>
        <member name="M:FieaGameEngine.Datum.Set(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst)">
            <summary>
Sets an index of the datum to the value passed in.
</summary>
            <param name="value">The value that you wish to set at the datum index</param>
            <param name="index">The position in the datum you wish to change</param>
        </member>
        <member name="M:FieaGameEngine.Datum.Reserve(System.UInt32)">
            <summary>
Datum will have access but not control to the array passed in.
Will not be able to shrink or grow the array.
</summary>
            <param name="ext_array">The array which the Datum will have access to</param>
            <param name="size">The number of elements that the Datum will have access to in the array passed in</param>
        </member>
        <member name="M:FieaGameEngine.Datum.SetStorage(FieaGameEngine.RTTI**,System.UInt32)">
            <summary>
Datum will have access but not control to the array passed in.
Will not be able to shrink or grow the array.
</summary>
            <param name="ext_array">The array which the Datum will have access to</param>
            <param name="size">The number of elements that the Datum will have access to in the array passed in</param>
        </member>
        <member name="M:FieaGameEngine.Datum.SetStorage(glm.mat&lt;0x4,0x4,System.Single,glm::packed_highp&gt;*,System.UInt32)">
            <summary>
Datum will have access but not control to the array passed in.
Will not be able to shrink or grow the array.
</summary>
            <param name="ext_array">The array which the Datum will have access to</param>
            <param name="size">The number of elements that the Datum will have access to in the array passed in</param>
        </member>
        <member name="M:FieaGameEngine.Datum.SetStorage(glm.vec&lt;0x4,System.Single,glm::packed_highp&gt;*,System.UInt32)">
            <summary>
Datum will have access but not control to the array passed in.
Will not be able to shrink or grow the array.
</summary>
            <param name="ext_array">The array which the Datum will have access to</param>
            <param name="size">The number of elements that the Datum will have access to in the array passed in</param>
        </member>
        <member name="M:FieaGameEngine.Datum.SetStorage(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*,System.UInt32)">
            <summary>
Datum will have access but not control to the array passed in.
Will not be able to shrink or grow the array.
</summary>
            <param name="ext_array">The array which the Datum will have access to</param>
            <param name="size">The number of elements that the Datum will have access to in the array passed in</param>
        </member>
        <member name="M:FieaGameEngine.Datum.SetStorage(System.Single*,System.UInt32)">
            <summary>
Datum will have access but not control to the array passed in.
Will not be able to shrink or grow the array.
</summary>
            <param name="ext_array">The array which the Datum will have access to</param>
            <param name="size">The number of elements that the Datum will have access to in the array passed in</param>
        </member>
        <member name="M:FieaGameEngine.Datum.SetStorage(System.Boolean*,System.UInt32)">
            <summary>
Datum will have access but not control to the array passed in.
Will not be able to shrink or grow the array.
</summary>
            <param name="ext_array">The array which the Datum will have access to</param>
            <param name="size">The number of elements that the Datum will have access to in the array passed in</param>
        </member>
        <member name="M:FieaGameEngine.Datum.SetStorage(System.Int32*,System.UInt32)">
            <summary>
Datum will have access but not control to the array passed in.
Will not be able to shrink or grow the array.
</summary>
            <param name="ext_array">The array which the Datum will have access to</param>
            <param name="size">The number of elements that the Datum will have access to in the array passed in</param>
        </member>
        <member name="M:FieaGameEngine.Datum.Clear">
            <summary>
Removes all elements from the Datum. Does not effect capacity.
</summary>
        </member>
        <member name="M:FieaGameEngine.Datum.Resize(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Can shrink or grow a Datum.
If growing the values will be default constructed.
If shrinking the value will be deleted/removed.
</summary>
            <param name="size">The size that the Datum will take.</param>
            <returns>
True if the datum was resized.
False if the datum was not resized.
</returns>
        </member>
        <member name="M:FieaGameEngine.Datum.Size">
            <summary>
Returns the current number of elements in the Datum
</summary>
            <returns>Returns the current number of elements in the Datum</returns>
        </member>
        <member name="M:FieaGameEngine.Datum.SetType(FieaGameEngine.DatumTypes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets the type that the Datum will be. Can only be called on a Datum that has Unknown type.
</summary>
            <param name="type">Type to set the Datum to</param>
            <returns>
True if the type was set.
False if the type was not set.
</returns>
        </member>
        <member name="M:FieaGameEngine.Datum.Type">
            <summary>
Returns the type that the Datum is assigned.
</summary>
            <returns>Returns the type that the Datum is assigned.</returns>
        </member>
        <member name="M:FieaGameEngine.Datum.op_Assign(FieaGameEngine.Datum*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Operator Overload Assignment - Datum
</summary>
            <param name="rhs">Datum that will be converted to r-value and whose contents will be moved to callilng Datum</param>
            <returns>A reference to itself</returns>
        </member>
        <member name="M:FieaGameEngine.Datum.#ctor(FieaGameEngine.Datum*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Move Constructor
</summary>
            <param name="rhs">Datum that will be converted to r-value and whose contents will be moved to callilng Datum</param>
        </member>
        <member name="M:FieaGameEngine.Datum.op_Assign(FieaGameEngine.Scope!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Operator Overload Assignment - Scaler
Scalar assignment to Datum.
</summary>
            <param name="value">Will assign Datum to have only the value passed in</param>
            <returns>A reference to itself</returns>
        </member>
        <member name="M:FieaGameEngine.Datum.op_Assign(FieaGameEngine.RTTI**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Operator Overload Assignment - Scaler
Scalar assignment to Datum.
</summary>
            <param name="value">Will assign Datum to have only the value passed in</param>
            <returns>A reference to itself</returns>
        </member>
        <member name="M:FieaGameEngine.Datum.op_Assign(glm.mat&lt;0x4,0x4,System.Single,glm::packed_highp&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Operator Overload Assignment - Scaler
Scalar assignment to Datum.
</summary>
            <param name="value">Will assign Datum to have only the value passed in</param>
            <returns>A reference to itself</returns>
        </member>
        <member name="M:FieaGameEngine.Datum.op_Assign(glm.vec&lt;0x4,System.Single,glm::packed_highp&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Operator Overload Assignment - Scaler
Scalar assignment to Datum.
</summary>
            <param name="value">Will assign Datum to have only the value passed in</param>
            <returns>A reference to itself</returns>
        </member>
        <member name="M:FieaGameEngine.Datum.op_Assign(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Operator Overload Assignment - Scaler
Scalar assignment to Datum.
</summary>
            <param name="value">Will assign Datum to have only the value passed in</param>
            <returns>A reference to itself</returns>
        </member>
        <member name="M:FieaGameEngine.Datum.op_Assign(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Operator Overload Assignment - Scaler
Scalar assignment to Datum.
</summary>
            <param name="value">Will assign Datum to have only the value passed in</param>
            <returns>A reference to itself</returns>
        </member>
        <member name="M:FieaGameEngine.Datum.op_Assign(System.Boolean!System.Runtime.CompilerServices.IsConst)">
            <summary>
Operator Overload Assignment - Scaler
Scalar assignment to Datum.
</summary>
            <param name="value">Will assign Datum to have only the value passed in</param>
            <returns>A reference to itself</returns>
        </member>
        <member name="M:FieaGameEngine.Datum.op_Assign(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Operator Overload Assignment - Scaler
Scalar assignment to Datum.
</summary>
            <param name="value">Will assign Datum to have only the value passed in</param>
            <returns>A reference to itself</returns>
        </member>
        <member name="M:FieaGameEngine.Datum.op_Assign(FieaGameEngine.Datum!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Copy Assignment Operator
</summary>
            <param name="rhs">A reference to another datum that data will be copied from</param>
            <returns>A reference to itself</returns>
        </member>
        <member name="M:FieaGameEngine.Datum.#ctor(FieaGameEngine.Datum!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Copy Constructor
</summary>
            <param name="rhs">A reference to another datum that data will be copied from</param>
        </member>
        <member name="T:FieaGameEngine.Datum">
            <summary>
Runtime polymorphic structure
</summary>
        </member>
        <member name="T:FieaGameEngine.DatumTypes">
            <summary>
Used for O(1) access to type check Datum
</summary>
        </member>
        <member name="T:FieaGameEngine.Scope">
            <summary>
Forward declaration used for scope reference in the header
</summary>
        </member>
        <member name="T:FieaGameEngine.RTTI">
            <summary>
Forward declaration used for RTTI* types referenced in the header
</summary>
        </member>
        <member name="D:glm.ddualquat">
Dual-quaternion of default double-qualifier floating-point numbers.

@see gtx_dual_quaternion
</member>
        <member name="D:glm.fdualquat">
Dual-quaternion of single-qualifier floating-point numbers.

@see gtx_dual_quaternion
</member>
        <member name="D:glm.dualquat">
Dual-quaternion of floating-point numbers.

@see gtx_dual_quaternion
</member>
        <member name="D:glm.highp_ddualquat">
Dual-quaternion of high double-qualifier floating-point numbers.

@see gtx_dual_quaternion
</member>
        <member name="D:glm.mediump_ddualquat">
Dual-quaternion of medium double-qualifier floating-point numbers.

@see gtx_dual_quaternion
</member>
        <member name="D:glm.lowp_ddualquat">
Dual-quaternion of low double-qualifier floating-point numbers.

@see gtx_dual_quaternion
</member>
        <member name="D:glm.highp_fdualquat">
Dual-quaternion of high single-qualifier floating-point numbers.

@see gtx_dual_quaternion
</member>
        <member name="D:glm.mediump_fdualquat">
Dual-quaternion of medium single-qualifier floating-point numbers.

@see gtx_dual_quaternion
</member>
        <member name="D:glm.lowp_fdualquat">
Dual-quaternion of low single-qualifier floating-point numbers.

@see gtx_dual_quaternion
</member>
        <member name="D:glm.highp_dualquat">
Dual-quaternion of high single-qualifier floating-point numbers.

@see gtx_dual_quaternion
</member>
        <member name="D:glm.mediump_dualquat">
Dual-quaternion of medium single-qualifier floating-point numbers.

@see gtx_dual_quaternion
</member>
        <member name="D:glm.lowp_dualquat">
Dual-quaternion of low single-qualifier floating-point numbers.

@see gtx_dual_quaternion
</member>
        <member name="D:glm.f64quat">
Double-qualifier floating-point quaternion.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64quat">
High double-qualifier floating-point quaternion.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32quat">
High single-qualifier floating-point quaternion.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64quat">
Medium double-qualifier floating-point quaternion.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32quat">
Medium single-qualifier floating-point quaternion.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64quat">
Low double-qualifier floating-point quaternion.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32quat">
Low single-qualifier floating-point quaternion.
@see gtc_type_precision
</member>
        <member name="D:glm.f32quat">
Single-qualifier floating-point quaternion.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat4x4">
Double-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat4x3">
Double-qualifier floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat4x2">
Double-qualifier floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat3x4">
Double-qualifier floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat3x3">
Double-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat3x2">
Double-qualifier floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat2x4">
Double-qualifier floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat2x3">
Double-qualifier floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat2x2">
Double-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Double-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat4">
Double-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat3">
Double-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64mat2">
Double-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Double-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat4x4">
Single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat4x3">
Single-qualifier floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat4x2">
Single-qualifier floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat3x4">
Single-qualifier floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat3x3">
Single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat3x2">
Single-qualifier floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat2x4">
Single-qualifier floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat2x3">
Single-qualifier floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat2x2">
Single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat4">
Single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat3">
Single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f32mat2">
Single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat4x4">
Single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat4x3">
Single-qualifier floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat4x2">
Single-qualifier floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat3x4">
Single-qualifier floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat3x3">
Single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat3x2">
Single-qualifier floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat2x4">
Single-qualifier floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat2x3">
Single-qualifier floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat2x2">
Single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat4">
Single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat3">
Single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.fmat2">
Single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.f64vec4">
Double-qualifier floating-point vector of 4 components.
@see gtc_type_precision
</member>
        <member name="D:glm.f64vec3">
Double-qualifier floating-point vector of 3 components.
@see gtc_type_precision
</member>
        <member name="D:glm.f64vec2">
Double-qualifier floating-point vector of 2 components.
@see gtc_type_precision
</member>
        <member name="D:glm.f64vec1">
Double-qualifier floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.f32vec4">
Single-qualifier floating-point vector of 4 components.
@see gtc_type_precision
</member>
        <member name="D:glm.f32vec3">
Single-qualifier floating-point vector of 3 components.
@see gtc_type_precision
</member>
        <member name="D:glm.f32vec2">
Single-qualifier floating-point vector of 2 components.
@see gtc_type_precision
</member>
        <member name="D:glm.f32vec1">
Single-qualifier floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.fvec4">
Single-qualifier floating-point vector of 4 components.
@see gtc_type_precision
</member>
        <member name="D:glm.fvec3">
Single-qualifier floating-point vector of 3 components.
@see gtc_type_precision
</member>
        <member name="D:glm.fvec2">
Single-qualifier floating-point vector of 2 components.
@see gtc_type_precision
</member>
        <member name="D:glm.fvec1">
Single-qualifier floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u64vec4">
High qualifier 64 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u64vec3">
High qualifier 64 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u64vec2">
High qualifier 64 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u64vec1">
High qualifier 64 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u64vec4">
Medium qualifier 64 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u64vec3">
Medium qualifier 64 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u64vec2">
Medium qualifier 64 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u64vec1">
Medium qualifier 64 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u64vec4">
Low qualifier 64 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u64vec3">
Low qualifier 64 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u64vec2">
Low qualifier 64 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u64vec1">
Low qualifier 64 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u32vec4">
High qualifier 32 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u32vec3">
High qualifier 32 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u32vec2">
High qualifier 32 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u32vec1">
High qualifier 32 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u32vec4">
Medium qualifier 32 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u32vec3">
Medium qualifier 32 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u32vec2">
Medium qualifier 32 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u32vec1">
Medium qualifier 32 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u32vec4">
Low qualifier 32 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u32vec3">
Low qualifier 32 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u32vec2">
Low qualifier 32 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u32vec1">
Low qualifier 32 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u16vec4">
High qualifier 16 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u16vec3">
High qualifier 16 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u16vec2">
High qualifier 16 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u16vec1">
High qualifier 16 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u16vec4">
Medium qualifier 16 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u16vec3">
Medium qualifier 16 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u16vec2">
Medium qualifier 16 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u16vec1">
Medium qualifier 16 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u16vec4">
Low qualifier 16 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u16vec3">
Low qualifier 16 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u16vec2">
Low qualifier 16 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u16vec1">
Low qualifier 16 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u8vec4">
High qualifier 8 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u8vec3">
High qualifier 8 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u8vec2">
High qualifier 8 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u8vec1">
High qualifier 8 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u8vec4">
Medium qualifier 8 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u8vec3">
Medium qualifier 8 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u8vec2">
Medium qualifier 8 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u8vec1">
Medium qualifier 8 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u8vec4">
Low qualifier 8 bit unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u8vec3">
Low qualifier 8 bit unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u8vec2">
Low qualifier 8 bit unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u8vec1">
Low qualifier 8 bit unsigned integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_uvec4">
High qualifier unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_uvec3">
High qualifier unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_uvec2">
High qualifier unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_uvec1">
High qualifier unsigned integer vector of 1 component type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_uvec4">
Medium qualifier unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_uvec3">
Medium qualifier unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_uvec2">
Medium qualifier unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_uvec1">
Medium qualifier unsigned integer vector of 1 component type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uvec4">
Low qualifier unsigned integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uvec3">
Low qualifier unsigned integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uvec2">
Low qualifier unsigned integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uvec1">
Low qualifier unsigned integer vector of 1 component type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i64vec4">
High qualifier 64 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i64vec3">
High qualifier 64 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i64vec2">
High qualifier 64 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i64vec1">
High qualifier 64 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i64vec4">
Medium qualifier 64 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i64vec3">
Medium qualifier 64 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i64vec2">
Medium qualifier 64 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i64vec1">
Medium qualifier 64 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i64vec4">
Low qualifier 64 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i64vec3">
Low qualifier 64 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i64vec2">
Low qualifier 64 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i64vec1">
Low qualifier 64 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i32vec4">
High qualifier 32 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i32vec3">
High qualifier 32 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i32vec2">
High qualifier 32 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i32vec1">
High qualifier 32 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i32vec4">
Medium qualifier 32 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i32vec3">
Medium qualifier 32 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i32vec2">
Medium qualifier 32 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i32vec1">
Medium qualifier 32 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i32vec4">
Low qualifier 32 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i32vec3">
Low qualifier 32 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i32vec2">
Low qualifier 32 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i32vec1">
Low qualifier 32 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i16vec4">
High qualifier 16 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i16vec3">
High qualifier 16 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i16vec2">
High qualifier 16 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i16vec1">
High qualifier 16 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i16vec4">
Medium qualifier 16 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i16vec3">
Medium qualifier 16 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i16vec2">
Medium qualifier 16 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i16vec1">
Medium qualifier 16 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i16vec4">
Low qualifier 16 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i16vec3">
Low qualifier 16 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i16vec2">
Low qualifier 16 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i16vec1">
Low qualifier 16 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i8vec4">
High qualifier 8 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i8vec3">
High qualifier 8 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i8vec2">
High qualifier 8 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i8vec1">
High qualifier 8 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i8vec4">
Medium qualifier 8 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i8vec3">
Medium qualifier 8 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i8vec2">
Medium qualifier 8 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i8vec1">
Medium qualifier 8 bit signed integer scalar type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i8vec4">
Low qualifier 8 bit signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i8vec3">
Low qualifier 8 bit signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i8vec2">
Low qualifier 8 bit signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i8vec1">
Low qualifier 8 bit signed integer vector of 1 component type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_ivec4">
High qualifier signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_ivec3">
High qualifier signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_ivec2">
High qualifier signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_ivec1">
High qualifier signed integer vector of 1 component type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_ivec4">
Medium qualifier signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_ivec3">
Medium qualifier signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_ivec2">
Medium qualifier signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_ivec1">
Medium qualifier signed integer vector of 1 component type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_ivec4">
Low qualifier signed integer vector of 4 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_ivec3">
Low qualifier signed integer vector of 3 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_ivec2">
Low qualifier signed integer vector of 2 components type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_ivec1">
Low qualifier signed integer vector of 1 component type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat4">
High double-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat3">
High double-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat2">
High double-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
High double-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat4x4">
High double-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat4x3">
High double-qualifier floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat4x2">
High double-qualifier floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat3x4">
High double-qualifier floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat3x3">
High double-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat3x2">
High double-qualifier floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat2x4">
High double-qualifier floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat2x3">
High double-qualifier floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64mat2x2">
High double-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
High double-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat4">
Medium double-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat3">
Medium double-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat2">
Medium double-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Medium double-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat4x4">
Medium double-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat4x3">
Medium double-qualifier floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat4x2">
Medium double-qualifier floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat3x4">
Medium double-qualifier floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat3x3">
Medium double-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat3x2">
Medium double-qualifier floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat2x4">
Medium double-qualifier floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat2x3">
Medium double-qualifier floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64mat2x2">
Medium double-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Medium double-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat4">
Low double-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat3">
Low double-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat2">
Low double-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Low double-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat4x4">
Low double-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat4x3">
Low double-qualifier floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat4x2">
Low double-qualifier floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat3x4">
Low double-qualifier floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat3x3">
Low double-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat3x2">
Low double-qualifier floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat2x4">
Low double-qualifier floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat2x3">
Low double-qualifier floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64mat2x2">
Low double-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Low double-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat4">
High single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat3">
High single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat2">
High single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
High single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat4x4">
High single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat4x3">
High single-qualifier floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat4x2">
High single-qualifier floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat3x4">
High single-qualifier floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat3x3">
High single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat3x2">
High single-qualifier floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat2x4">
High single-qualifier floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat2x3">
High single-qualifier floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32mat2x2">
High single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
High single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat4">
Medium single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat3">
Medium single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat2">
Medium single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Medium single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat4x4">
Medium single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat4x3">
Medium single-qualifier floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat4x2">
Medium single-qualifier floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat3x4">
Medium single-qualifier floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat3x3">
Medium single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat3x2">
Medium single-qualifier floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat2x4">
Medium single-qualifier floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat2x3">
Medium single-qualifier floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32mat2x2">
High single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Low single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat4">
Low single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat3">
Low single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat2">
Low single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Low single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat4x4">
Low single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat4x3">
Low single-qualifier floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat4x2">
Low single-qualifier floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat3x4">
Low single-qualifier floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat3x3">
Low single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat3x2">
Low single-qualifier floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat2x4">
Low single-qualifier floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat2x3">
Low single-qualifier floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32mat2x2">
Low single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Low single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat4">
High single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat3">
High single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat2">
High single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
High single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat4x4">
High single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat4x3">
High single-qualifier floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat4x2">
High single-qualifier floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat3x4">
High single-qualifier floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat3x3">
High single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat3x2">
High single-qualifier floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat2x4">
High single-qualifier floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat2x3">
High single-qualifier floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fmat2x2">
High single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
High single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat4">
Medium single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat3">
Medium single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat2">
Medium single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Medium single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat4x4">
Medium single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat4x3">
Medium single-qualifier floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat4x2">
Medium single-qualifier floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat3x4">
Medium single-qualifier floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat3x3">
Medium single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat3x2">
Medium single-qualifier floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat2x4">
Medium single-qualifier floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat2x3">
Medium single-qualifier floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fmat2x2">
Medium single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Medium single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat4">
Low single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat3">
Low single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat2">
Low single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Low single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat4x4">
Low single-qualifier floating-point 4x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat4x3">
Low single-qualifier floating-point 4x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat4x2">
Low single-qualifier floating-point 4x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat3x4">
Low single-qualifier floating-point 3x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat3x3">
Low single-qualifier floating-point 3x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat3x2">
Low single-qualifier floating-point 3x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat2x4">
Low single-qualifier floating-point 2x4 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat2x3">
Low single-qualifier floating-point 2x3 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fmat2x2">
Low single-qualifier floating-point 1x1 matrix.
@see gtc_type_precision
Low single-qualifier floating-point 2x2 matrix.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64vec4">
High double-qualifier floating-point vector of 4 components.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64vec3">
High double-qualifier floating-point vector of 3 components.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64vec2">
High double-qualifier floating-point vector of 2 components.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64vec1">
High double-qualifier floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64vec4">
Medium double-qualifier floating-point vector of 4 components.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64vec3">
Medium double-qualifier floating-point vector of 3 components.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64vec2">
Medium double-qualifier floating-point vector of 2 components.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64vec1">
Medium double-qualifier floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64vec4">
Low double-qualifier floating-point vector of 4 components.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64vec3">
Low double-qualifier floating-point vector of 3 components.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64vec2">
Low double-qualifier floating-point vector of 2 components.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64vec1">
Low double-qualifier floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32vec4">
High single-qualifier floating-point vector of 4 components.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32vec3">
High single-qualifier floating-point vector of 3 components.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32vec2">
High single-qualifier floating-point vector of 2 components.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32vec1">
High single-qualifier floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32vec4">
Medium single-qualifier floating-point vector of 4 components.
@see core_precision
</member>
        <member name="D:glm.mediump_f32vec3">
Medium single-qualifier floating-point vector of 3 components.
@see core_precision
</member>
        <member name="D:glm.mediump_f32vec2">
Medium single-qualifier floating-point vector of 2 components.
@see core_precision
</member>
        <member name="D:glm.mediump_f32vec1">
Medium single-qualifier floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32vec4">
Low single-qualifier floating-point vector of 4 components.
@see core_precision
</member>
        <member name="D:glm.lowp_f32vec3">
Low single-qualifier floating-point vector of 3 components.
@see core_precision
</member>
        <member name="D:glm.lowp_f32vec2">
Low single-qualifier floating-point vector of 2 components.
@see core_precision
</member>
        <member name="D:glm.lowp_f32vec1">
Low single-qualifier floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_fvec4">
High Single-qualifier floating-point vector of 4 components.
@see core_precision
</member>
        <member name="D:glm.highp_fvec3">
High Single-qualifier floating-point vector of 3 components.
@see core_precision
</member>
        <member name="D:glm.highp_fvec2">
High Single-qualifier floating-point vector of 2 components.
@see core_precision
</member>
        <member name="D:glm.highp_fvec1">
High single-qualifier floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fvec4">
Medium Single-qualifier floating-point vector of 4 components.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fvec3">
Medium Single-qualifier floating-point vector of 3 components.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fvec2">
Medium Single-qualifier floating-point vector of 2 components.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_fvec1">
Medium single-qualifier floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fvec4">
Low single-qualifier floating-point vector of 4 components.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fvec3">
Low single-qualifier floating-point vector of 3 components.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fvec2">
Low single-qualifier floating-point vector of 2 components.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_fvec1">
Low single-qualifier floating-point vector of 1 component.
@see gtc_type_precision
</member>
        <member name="D:glm.f64">
Default 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision

64 bit double-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.f32">
Default 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision

32 bit single-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.float64_t">
Default 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision

64 bit double-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.float32_t">
Default 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision

32 bit single-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f64">
High 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_f32">
High 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_float64_t">
High 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_float32_t">
High 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_float64">
High 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_float32">
High 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f64">
Medium 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_f32">
Medium 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_float64_t">
Medium 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_float32_t">
Medium 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_float64">
Medium 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_float32">
Medium 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f64">
Low 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision

Low 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision

Low 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_f32">
Low 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision

Low 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision

Low 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_float64_t">
Low 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision

Low 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision

Low 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_float32_t">
Low 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision

Low 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision

Low 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_float64">
Low 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision

Low 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision

Low 64 bit double-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_float32">
Low 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision

Low 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision

Low 32 bit single-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.float64">
Double-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.float32">
Single-qualifier floating-point scalar.
@see gtc_type_precision
</member>
        <member name="D:glm.u64">
Default qualifier 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.u32">
Default qualifier 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.u16">
Default qualifier 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.u8">
Default qualifier 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u64">
High qualifier 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u32">
High qualifier 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u16">
High qualifier 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_u8">
High qualifier 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_uint64_t">
High qualifier 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_uint32_t">
High qualifier 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_uint16_t">
High qualifier 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_uint8_t">
High qualifier 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_uint64">
High qualifier 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_uint32">
High qualifier 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_uint16">
High qualifier 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_uint8">
High qualifier 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u64">
Medium qualifier 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u32">
Medium qualifier 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u16">
Medium qualifier 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_u8">
Medium qualifier 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_uint64_t">
Medium qualifier 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_uint32_t">
Medium qualifier 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_uint16_t">
Medium qualifier 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_uint8_t">
Medium qualifier 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_uint64">
Medium qualifier 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_uint32">
Medium qualifier 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_uint16">
Medium qualifier 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_uint8">
Medium qualifier 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u64">
Low qualifier 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u32">
Low qualifier 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u16">
Low qualifier 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_u8">
Low qualifier 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uint64_t">
Low qualifier 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uint32_t">
Low qualifier 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uint16_t">
Low qualifier 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uint8_t">
Low qualifier 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uint64">
Low qualifier 64 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uint32">
Low qualifier 32 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uint16">
Low qualifier 16 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_uint8">
Low qualifier 8 bit unsigned integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.i64">
64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.i32">
32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.i16">
16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.i8">
8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i64">
High qualifier 64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i32">
High qualifier 32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i16">
High qualifier 16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_i8">
High qualifier 8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_int64_t">
High qualifier 64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_int32_t">
32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_int16_t">
High qualifier 16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_int8_t">
High qualifier 8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_int64">
High qualifier 64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_int32">
High qualifier 32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_int16">
High qualifier 16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.highp_int8">
High qualifier 8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i64">
Medium qualifier 64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i32">
Medium qualifier 32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i16">
Medium qualifier 16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_i8">
Medium qualifier 8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_int64_t">
Medium qualifier 64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_int32_t">
Medium qualifier 32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_int16_t">
Medium qualifier 16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_int8_t">
Medium qualifier 8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_int64">
Medium qualifier 64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_int32">
Medium qualifier 32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_int16">
Medium qualifier 16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.mediump_int8">
Medium qualifier 8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i64">
Low qualifier 64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i32">
Low qualifier 32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i16">
Low qualifier 16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_i8">
Low qualifier 8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_int64_t">
Low qualifier 64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_int32_t">
Low qualifier 32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_int16_t">
Low qualifier 16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_int8_t">
Low qualifier 8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_int64">
Low qualifier 64 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_int32">
Low qualifier 32 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_int16">
Low qualifier 16 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.lowp_int8">
@addtogroup gtc_type_precision
@{
Low qualifier 8 bit signed integer type.
@see gtc_type_precision
</member>
        <member name="D:glm.u64vec1">
64 bit unsigned integer vector of 1 component type.

@see ext_vector_uint1_sized
</member>
        <member name="D:glm.u32vec1">
32 bit unsigned integer vector of 1 component type.

@see ext_vector_uint1_sized
</member>
        <member name="D:glm.u16vec1">
16 bit unsigned integer vector of 1 component type.

@see ext_vector_uint1_sized
</member>
        <member name="D:glm.u8vec1">
@addtogroup ext_vector_uint1_sized
@{
8 bit unsigned integer vector of 1 component type.

@see ext_vector_uint1_sized
</member>
        <member name="D:glm.uvec1">
@addtogroup ext_vector_uint1
@{
1 component vector of unsigned integer numbers.
</member>
        <member name="D:glm.i64vec1">
64 bit signed integer vector of 1 component type.

@see ext_vector_int1_sized
</member>
        <member name="D:glm.i32vec1">
32 bit signed integer vector of 1 component type.

@see ext_vector_int1_sized
</member>
        <member name="D:glm.i16vec1">
16 bit signed integer vector of 1 component type.

@see ext_vector_int1_sized
</member>
        <member name="D:glm.i8vec1">
@addtogroup ext_vector_int1_sized
@{
8 bit signed integer vector of 1 component type.

@see ext_vector_int1_sized
</member>
        <member name="D:glm.ivec1">
@addtogroup ext_vector_int1
@{
1 component vector of signed integer numbers.
</member>
        <member name="D:glm.lowp_dvec1">
1 component vector of double-precision floating-point numbers using low precision arithmetic in term of ULPs.
</member>
        <member name="D:glm.mediump_dvec1">
1 component vector of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.
</member>
        <member name="D:glm.highp_dvec1">
@addtogroup ext_vector_double1_precision
@{
1 component vector of double-precision floating-point numbers using high precision arithmetic in term of ULPs.
</member>
        <member name="D:glm.dvec1">
@addtogroup ext_vector_double1
@{
1 components vector of double-precision floating-point numbers.
</member>
        <member name="D:glm.lowp_vec1">
1 component vector of single-precision floating-point numbers using low precision arithmetic in term of ULPs.
</member>
        <member name="D:glm.mediump_vec1">
1 component vector of single-precision floating-point numbers using medium precision arithmetic in term of ULPs.
</member>
        <member name="D:glm.highp_vec1">
@addtogroup ext_vector_float1_precision
@{
1 component vector of single-precision floating-point numbers using high precision arithmetic in term of ULPs.
</member>
        <member name="D:glm.vec1">
@addtogroup ext_vector_float1
@{
1 components vector of single-precision floating-point numbers.
</member>
        <member name="D:glm.lowp_bvec1">
1 component vector of bool values.
</member>
        <member name="D:glm.mediump_bvec1">
1 component vector of bool values.
</member>
        <member name="D:glm.highp_bvec1">
@addtogroup ext_vector_bool1_precision
@{
1 component vector of bool values.
</member>
        <member name="D:glm.bvec1">
@addtogroup ext_vector_bool1
@{
1 components vector of boolean.
</member>
        <member name="D:glm.highp_dquat">
Quaternion of high double-qualifier floating-point numbers using high precision arithmetic in term of ULPs.

@see ext_quaternion_double_precision
</member>
        <member name="D:glm.mediump_dquat">
Quaternion of medium double-qualifier floating-point numbers using high precision arithmetic in term of ULPs.

@see ext_quaternion_double_precision
</member>
        <member name="D:glm.lowp_dquat">
@addtogroup ext_quaternion_double_precision
@{
Quaternion of double-precision floating-point numbers using high precision arithmetic in term of ULPs.

@see ext_quaternion_double_precision
</member>
        <member name="D:glm.dquat">
@addtogroup ext_quaternion_double
@{
Quaternion of double-precision floating-point numbers.
</member>
        <member name="D:glm.highp_quat">
Quaternion of single-precision floating-point numbers using high precision arithmetic in term of ULPs.
</member>
        <member name="D:glm.mediump_quat">
Quaternion of single-precision floating-point numbers using high precision arithmetic in term of ULPs.
</member>
        <member name="D:glm.lowp_quat">
@addtogroup ext_quaternion_float_precision
@{
Quaternion of single-precision floating-point numbers using high precision arithmetic in term of ULPs.
</member>
        <member name="D:glm.quat">
@addtogroup ext_quaternion_float
@{
Quaternion of single-precision floating-point numbers.
</member>
        <member name="M:glm.unpackHalf2x16(System.UInt32)">
Returns a two-component floating-point vector with components obtained by unpacking a 32-bit unsigned integer into a pair of 16-bit values,
interpreting those values as 16-bit floating-point numbers according to the OpenGL Specification,
and converting them to 32-bit floating-point values.
The first component of the vector is obtained from the 16 least-significant bits of v;
the second component is obtained from the 16 most-significant bits of v.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackHalf2x16.xml">GLSL unpackHalf2x16 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.packHalf2x16(glm.vec&lt;0x2,System.Single,glm::packed_highp&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns an unsigned integer obtained by converting the components of a two-component floating-point vector
to the 16-bit floating-point representation found in the OpenGL Specification,
and then packing these two 16- bit integers into a 32-bit unsigned integer.
The first vector component specifies the 16 least-significant bits of the result;
the second component specifies the 16 most-significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packHalf2x16.xml">GLSL packHalf2x16 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.unpackDouble2x32(System.Double)">
Returns a two-component unsigned integer vector representation of v.
The bit-level representation of v is preserved.
The first component of the vector contains the 32 least significant bits of the double;
the second component consists the 32 most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackDouble2x32.xml">GLSL unpackDouble2x32 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.packDouble2x32(glm.vec&lt;0x2,System.UInt32,glm::packed_highp&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns a double-qualifier value obtained by packing the components of v into a 64-bit value.
If an IEEE 754 Inf or NaN is created, it will not signal, and the resulting floating point value is unspecified.
Otherwise, the bit- level representation of v is preserved.
The first vector component specifies the 32 least significant bits;
the second component specifies the 32 most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packDouble2x32.xml">GLSL packDouble2x32 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.unpackSnorm4x8(System.UInt32)">
First, unpacks a single 32-bit unsigned integer p into a pair of 16-bit unsigned integers, four 8-bit unsigned integers, or four 8-bit signed integers.
Then, each component is converted to a normalized floating-point value to generate the returned two- or four-component vector.

The conversion for unpacked fixed-point value f to floating point is done as follows:
unpackSnorm4x8: clamp(f / 127.0, -1, +1)

The first component of the returned vector will be extracted from the least significant bits of the input;
the last component will be extracted from the most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackSnorm4x8.xml">GLSL unpackSnorm4x8 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.unpackUnorm4x8(System.UInt32)">
First, unpacks a single 32-bit unsigned integer p into a pair of 16-bit unsigned integers, four 8-bit unsigned integers, or four 8-bit signed integers.
Then, each component is converted to a normalized floating-point value to generate the returned two- or four-component vector.

The conversion for unpacked fixed-point value f to floating point is done as follows:
unpackUnorm4x8: f / 255.0

The first component of the returned vector will be extracted from the least significant bits of the input;
the last component will be extracted from the most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackUnorm4x8.xml">GLSL unpackUnorm4x8 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.unpackSnorm2x16(System.UInt32)">
First, unpacks a single 32-bit unsigned integer p into a pair of 16-bit unsigned integers, four 8-bit unsigned integers, or four 8-bit signed integers.
Then, each component is converted to a normalized floating-point value to generate the returned two- or four-component vector.

The conversion for unpacked fixed-point value f to floating point is done as follows:
unpackSnorm2x16: clamp(f / 32767.0, -1, +1)

The first component of the returned vector will be extracted from the least significant bits of the input;
the last component will be extracted from the most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackSnorm2x16.xml">GLSL unpackSnorm2x16 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.unpackUnorm2x16(System.UInt32)">
First, unpacks a single 32-bit unsigned integer p into a pair of 16-bit unsigned integers, four 8-bit unsigned integers, or four 8-bit signed integers.
Then, each component is converted to a normalized floating-point value to generate the returned two- or four-component vector.

The conversion for unpacked fixed-point value f to floating point is done as follows:
unpackUnorm2x16: f / 65535.0

The first component of the returned vector will be extracted from the least significant bits of the input;
the last component will be extracted from the most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackUnorm2x16.xml">GLSL unpackUnorm2x16 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.packSnorm4x8(glm.vec&lt;0x4,System.Single,glm::packed_highp&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
First, converts each component of the normalized floating-point value v into 8- or 16-bit integer values.
Then, the results are packed into the returned 32-bit unsigned integer.

The conversion for component c of v to fixed point is done as follows:
packSnorm4x8:	round(clamp(c, -1, +1) * 127.0)

The first component of the vector will be written to the least significant bits of the output;
the last component will be written to the most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packSnorm4x8.xml">GLSL packSnorm4x8 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.packUnorm4x8(glm.vec&lt;0x4,System.Single,glm::packed_highp&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
First, converts each component of the normalized floating-point value v into 8- or 16-bit integer values.
Then, the results are packed into the returned 32-bit unsigned integer.

The conversion for component c of v to fixed point is done as follows:
packUnorm4x8:	round(clamp(c, 0, +1) * 255.0)

The first component of the vector will be written to the least significant bits of the output;
the last component will be written to the most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packUnorm4x8.xml">GLSL packUnorm4x8 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.packSnorm2x16(glm.vec&lt;0x2,System.Single,glm::packed_highp&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
First, converts each component of the normalized floating-point value v into 8- or 16-bit integer values.
Then, the results are packed into the returned 32-bit unsigned integer.

The conversion for component c of v to fixed point is done as follows:
packSnorm2x16: round(clamp(v, -1, +1) * 32767.0)

The first component of the vector will be written to the least significant bits of the output;
the last component will be written to the most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packSnorm2x16.xml">GLSL packSnorm2x16 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="M:glm.packUnorm2x16(glm.vec&lt;0x2,System.Single,glm::packed_highp&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@addtogroup core_func_packing
@{
First, converts each component of the normalized floating-point value v into 8- or 16-bit integer values.
Then, the results are packed into the returned 32-bit unsigned integer.

The conversion for component c of v to fixed point is done as follows:
packUnorm2x16: round(clamp(c, 0, +1) * 65535.0)

The first component of the vector will be written to the least significant bits of the output;
the last component will be written to the most significant bits.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packUnorm2x16.xml">GLSL packUnorm2x16 man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></member>
        <member name="D:glm.highp_mat2x2">
2 columns of 2 components matrix of single-precision floating-point numbers using high precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat2x2">
2 columns of 2 components matrix of single-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat2x2">
2 columns of 2 components matrix of single-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_mat2">
2 columns of 2 components matrix of single-precision floating-point numbers using high precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat2">
2 columns of 2 components matrix of single-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat2">
@addtogroup core_matrix_precision
@{
2 columns of 2 components matrix of single-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mat2">
2 columns of 2 components matrix of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.mat2x2">
@addtogroup core_matrix
@{
2 columns of 2 components matrix of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_dmat2x2">
2 columns of 2 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat2x2">
2 columns of 2 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat2x2">
2 columns of 2 components matrix of double-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_dmat2">
2 columns of 2 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat2">
2 columns of 2 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat2">
@addtogroup core_matrix_precision
@{
2 columns of 2 components matrix of double-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.dmat2">
2 columns of 2 components matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.dmat2x2">
@addtogroup core_matrix
@{
2 columns of 2 components matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="M:glm.uintBitsToFloat(System.UInt32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns a floating-point value corresponding to a
unsigned integer encoding of a floating-point value.
If an inf or NaN is passed in, it will not signal, and the
resulting floating point value is unspecified. Otherwise,
the bit-level representation is preserved.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/uintBitsToFloat.xml">GLSL uintBitsToFloat man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.3 Common Functions</a></member>
        <member name="M:glm.intBitsToFloat(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns a floating-point value corresponding to a signed
integer encoding of a floating-point value.
If an inf or NaN is passed in, it will not signal, and the
resulting floating point value is unspecified. Otherwise,
the bit-level representation is preserved.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/intBitsToFloat.xml">GLSL intBitsToFloat man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.3 Common Functions</a></member>
        <member name="M:glm.floatBitsToUint(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns a unsigned integer value representing
the encoding of a floating-point value. The floatingpoint
value's bit-level representation is preserved.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/floatBitsToUint.xml">GLSL floatBitsToUint man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.3 Common Functions</a></member>
        <member name="M:glm.floatBitsToInt(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns a signed integer value representing
the encoding of a floating-point value. The floating-point
value's bit-level representation is preserved.

@see <a href="http://www.opengl.org/sdk/docs/manglsl/xhtml/floatBitsToInt.xml">GLSL floatBitsToInt man page</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.3 Common Functions</a></member>
        <member name="D:glm.highp_mat4x4">
4 columns of 4 components matrix of single-precision floating-point numbers using high precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat4x4">
4 columns of 4 components matrix of single-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat4x4">
4 columns of 4 components matrix of single-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_mat4">
4 columns of 4 components matrix of single-precision floating-point numbers using high precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat4">
4 columns of 4 components matrix of single-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat4">
@addtogroup core_matrix_precision
@{
4 columns of 4 components matrix of single-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mat4">
4 columns of 4 components matrix of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.mat4x4">
@ingroup core_matrix
@{
4 columns of 4 components matrix of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_dmat4x4">
4 columns of 4 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat4x4">
4 columns of 4 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat4x4">
4 columns of 4 components matrix of double-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_dmat4">
4 columns of 4 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat4">
4 columns of 4 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat4">
@addtogroup core_matrix_precision
@{
4 columns of 4 components matrix of double-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.dmat4">
4 columns of 4 components matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.dmat4x4">
@addtogroup core_matrix
@{
4 columns of 4 components matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_mat4x3">
4 columns of 3 components matrix of single-precision floating-point numbers using high precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat4x3">
4 columns of 3 components matrix of single-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat4x3">
@addtogroup core_matrix_precision
@{
4 columns of 3 components matrix of single-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mat4x3">
@addtogroup core_matrix
@{
4 columns of 3 components matrix of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_dmat4x3">
4 columns of 3 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat4x3">
4 columns of 3 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat4x3">
@addtogroup core_matrix_precision
@{
4 columns of 3 components matrix of double-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.dmat4x3">
@addtogroup core_matrix
@{
4 columns of 3 components matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_mat4x2">
4 columns of 2 components matrix of single-precision floating-point numbers using high precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat4x2">
4 columns of 2 components matrix of single-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat4x2">
@addtogroup core_matrix_precision
@{
4 columns of 2 components matrix of single-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mat4x2">
@addtogroup core_matrix
@{
4 columns of 2 components matrix of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_dmat4x2">
4 columns of 2 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat4x2">
4 columns of 2 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat4x2">
@addtogroup core_matrix_precision
@{
4 columns of 2 components matrix of double-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.dmat4x2">
@addtogroup core_matrix
@{
4 columns of 2 components matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_mat3x4">
3 columns of 4 components matrix of single-precision floating-point numbers using high precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat3x4">
3 columns of 4 components matrix of single-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat3x4">
@addtogroup core_matrix_precision
@{
3 columns of 4 components matrix of single-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mat3x4">
@addtogroup core_matrix
@{
3 columns of 4 components matrix of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_dmat3x4">
3 columns of 4 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat3x4">
3 columns of 4 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat3x4">
@addtogroup core_matrix_precision
@{
3 columns of 4 components matrix of double-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.dmat3x4">
@addtogroup core_matrix
@{
3 columns of 4 components matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_mat3x3">
3 columns of 3 components matrix of single-precision floating-point numbers using high precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat3x3">
3 columns of 3 components matrix of single-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat3x3">
3 columns of 3 components matrix of single-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_mat3">
3 columns of 3 components matrix of single-precision floating-point numbers using high precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat3">
3 columns of 3 components matrix of single-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat3">
@addtogroup core_matrix_precision
@{
3 columns of 3 components matrix of single-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mat3">
3 columns of 3 components matrix of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.mat3x3">
@addtogroup core_matrix
@{
3 columns of 3 components matrix of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_dmat3x3">
3 columns of 3 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat3x3">
3 columns of 3 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat3x3">
3 columns of 3 components matrix of double-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_dmat3">
3 columns of 3 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat3">
3 columns of 3 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat3">
@addtogroup core_matrix_precision
@{
3 columns of 3 components matrix of double-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.dmat3">
3 columns of 3 components matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.dmat3x3">
@addtogroup core_matrix
@{
3 columns of 3 components matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_mat3x2">
3 columns of 2 components matrix of single-precision floating-point numbers using high precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat3x2">
3 columns of 2 components matrix of single-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat3x2">
@addtogroup core_matrix_precision
@{
3 columns of 2 components matrix of single-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mat3x2">
@addtogroup core
@{
3 columns of 2 components matrix of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_dmat3x2">
3 columns of 2 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat3x2">
3 columns of 2 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat3x2">
@addtogroup core_matrix_precision
@{
3 columns of 2 components matrix of double-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.dmat3x2">
@addtogroup core_matrix
@{
3 columns of 2 components matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_mat2x4">
2 columns of 4 components matrix of single-precision floating-point numbers using high precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat2x4">
2 columns of 4 components matrix of single-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat2x4">
@addtogroup core_matrix_precision
@{
2 columns of 4 components matrix of single-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mat2x4">
@addtogroup core_matrix
@{
2 columns of 4 components matrix of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_dmat2x4">
2 columns of 4 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat2x4">
2 columns of 4 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat2x4">
@addtogroup core_matrix_precision
@{
2 columns of 4 components matrix of double-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.dmat2x4">
@addtogroup core_matrix
@{
2 columns of 4 components matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_mat2x3">
2 columns of 3 components matrix of single-precision floating-point numbers using high precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_mat2x3">
2 columns of 3 components matrix of single-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_mat2x3">
@addtogroup core_matrix_precision
@{
2 columns of 3 components matrix of single-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mat2x3">
@addtogroup core_matrix
@{
2 columns of 3 components matrix of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.highp_dmat2x3">
2 columns of 3 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dmat2x3">
2 columns of 3 components matrix of double-precision floating-point numbers using medium precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.lowp_dmat2x3">
@addtogroup core_matrix_precision
@{
2 columns of 3 components matrix of double-precision floating-point numbers using low precision arithmetic in term of ULPs.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.dmat2x3">
@addtogroup core_matrix
@{
2 columns of 3 components matrix of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.6 Matrices</a></member>
        <member name="D:glm.u64vec4">
64 bit unsigned integer vector of 4 components type.

@see ext_vector_uint4_sized
</member>
        <member name="D:glm.u32vec4">
32 bit unsigned integer vector of 4 components type.

@see ext_vector_uint4_sized
</member>
        <member name="D:glm.u16vec4">
16 bit unsigned integer vector of 4 components type.

@see ext_vector_uint4_sized
</member>
        <member name="D:glm.u8vec4">
@addtogroup ext_vector_uint4_sized
@{
8 bit unsigned integer vector of 4 components type.

@see ext_vector_uint4_sized
</member>
        <member name="D:glm.uvec4">
@addtogroup core_vector
@{
4 components vector of unsigned integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.i64vec4">
64 bit signed integer vector of 4 components type.

@see ext_vector_int4_sized
</member>
        <member name="D:glm.i32vec4">
32 bit signed integer vector of 4 components type.

@see ext_vector_int4_sized
</member>
        <member name="D:glm.i16vec4">
16 bit signed integer vector of 4 components type.

@see ext_vector_int4_sized
</member>
        <member name="D:glm.i8vec4">
@addtogroup ext_vector_int4_sized
@{
8 bit signed integer vector of 4 components type.

@see ext_vector_int4_sized
</member>
        <member name="D:glm.ivec4">
@addtogroup core_vector
@{
4 components vector of signed integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.lowp_dvec4">
4 components vector of low double-qualifier floating-point numbers.
There is no guarantee on the actual qualifier.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dvec4">
4 components vector of medium double-qualifier floating-point numbers.
There is no guarantee on the actual qualifier.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_dvec4">
@addtogroup core_vector_precision
@{
4 components vector of high double-qualifier floating-point numbers.
There is no guarantee on the actual qualifier.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.dvec4">
@addtogroup core_vector
@{
4 components vector of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.lowp_vec4">
4 components vector of low single-qualifier floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_vec4">
4 components vector of medium single-qualifier floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_vec4">
@addtogroup core_vector_precision
@{
4 components vector of high single-qualifier floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.vec4">
@addtogroup core_vector
@{
4 components vector of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.lowp_bvec4">
4 components vector of low qualifier bool numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_bvec4">
4 components vector of medium qualifier bool numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_bvec4">
@addtogroup core_vector_precision
@{
4 components vector of high qualifier bool numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.bvec4">
@addtogroup core_vector
@{
4 components vector of boolean.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.u64vec3">
64 bit unsigned integer vector of 3 components type.

@see ext_vector_uint3_sized
</member>
        <member name="D:glm.u32vec3">
32 bit unsigned integer vector of 3 components type.

@see ext_vector_uint3_sized
</member>
        <member name="D:glm.u16vec3">
16 bit unsigned integer vector of 3 components type.

@see ext_vector_uint3_sized
</member>
        <member name="D:glm.u8vec3">
@addtogroup ext_vector_uint3_sized
@{
8 bit unsigned integer vector of 3 components type.

@see ext_vector_uint3_sized
</member>
        <member name="D:glm.uvec3">
@addtogroup core_vector
@{
3 components vector of unsigned integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.i64vec3">
64 bit signed integer vector of 3 components type.

@see ext_vector_int3_sized
</member>
        <member name="D:glm.i32vec3">
32 bit signed integer vector of 3 components type.

@see ext_vector_int3_sized
</member>
        <member name="D:glm.i16vec3">
16 bit signed integer vector of 3 components type.

@see ext_vector_int3_sized
</member>
        <member name="D:glm.i8vec3">
@addtogroup ext_vector_int3_sized
@{
8 bit signed integer vector of 3 components type.

@see ext_vector_int3_sized
</member>
        <member name="D:glm.ivec3">
@addtogroup core_vector
@{
3 components vector of signed integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.lowp_dvec3">
3 components vector of low double-qualifier floating-point numbers.
There is no guarantee on the actual qualifier.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dvec3">
3 components vector of medium double-qualifier floating-point numbers.
There is no guarantee on the actual qualifier.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_dvec3">
@addtogroup core_vector_precision
@{
3 components vector of high double-qualifier floating-point numbers.
There is no guarantee on the actual qualifier.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.dvec3">
@addtogroup core_vector
@{
3 components vector of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.lowp_vec3">
3 components vector of low single-qualifier floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_vec3">
3 components vector of medium single-qualifier floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_vec3">
@addtogroup core_vector_precision
@{
3 components vector of high single-qualifier floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.vec3">
@addtogroup core_vector
@{
3 components vector of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.lowp_bvec3">
3 components vector of low qualifier bool numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_bvec3">
3 components vector of medium qualifier bool numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_bvec3">
@addtogroup core_vector_precision
@{
3 components vector of high qualifier bool numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.bvec3">
@addtogroup core_vector
@{
3 components vector of boolean.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.u64vec2">
64 bit unsigned integer vector of 2 components type.

@see ext_vector_uint2_sized
</member>
        <member name="D:glm.u32vec2">
32 bit unsigned integer vector of 2 components type.

@see ext_vector_uint2_sized
</member>
        <member name="D:glm.u16vec2">
16 bit unsigned integer vector of 2 components type.

@see ext_vector_uint2_sized
</member>
        <member name="D:glm.u8vec2">
@addtogroup ext_vector_uint2_sized
@{
8 bit unsigned integer vector of 2 components type.

@see ext_vector_uint2_sized
</member>
        <member name="D:glm.uint64">
64 bit unsigned integer type.
</member>
        <member name="D:glm.uint32">
32 bit unsigned integer type.
</member>
        <member name="D:glm.uint16">
16 bit unsigned integer type.
</member>
        <member name="D:glm.uint8">
@addtogroup ext_scalar_uint_sized
@{
8 bit unsigned integer type.
</member>
        <member name="D:glm.uvec2">
@addtogroup core_vector
@{
2 components vector of unsigned integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.i64vec2">
64 bit signed integer vector of 2 components type.

@see ext_vector_int2_sized
</member>
        <member name="D:glm.i32vec2">
32 bit signed integer vector of 2 components type.

@see ext_vector_int2_sized
</member>
        <member name="D:glm.i16vec2">
16 bit signed integer vector of 2 components type.

@see ext_vector_int2_sized
</member>
        <member name="D:glm.i8vec2">
@addtogroup ext_vector_int2_sized
@{
8 bit signed integer vector of 2 components type.

@see ext_vector_int2_sized
</member>
        <member name="D:glm.int64">
64 bit signed integer type.
</member>
        <member name="D:glm.int32">
32 bit signed integer type.
</member>
        <member name="D:glm.int16">
16 bit signed integer type.
</member>
        <member name="D:glm.int8">
@addtogroup ext_scalar_int_sized
@{
8 bit signed integer type.
</member>
        <member name="D:glm.ivec2">
@addtogroup core_vector
@{
2 components vector of signed integer numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.lowp_dvec2">
2 components vector of low double-qualifier floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_dvec2">
2 components vector of medium double-qualifier floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_dvec2">
@addtogroup core_vector_precision
@{
2 components vector of high double-qualifier floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.dvec2">
@addtogroup core_vector
@{
2 components vector of double-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.lowp_vec2">
2 components vector of low single-qualifier floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_vec2">
2 components vector of medium single-qualifier floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_vec2">
@addtogroup core_vector_precision
@{
2 components vector of high single-qualifier floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.vec2">
@addtogroup core_vector
@{
2 components vector of single-precision floating-point numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="D:glm.lowp_bvec2">
2 components vector of low qualifier bool numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.mediump_bvec2">
2 components vector of medium qualifier bool numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.highp_bvec2">
@addtogroup core_vector_precision
@{
2 components vector of high qualifier bool numbers.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a>
@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.7.2 Precision Qualifier</a></member>
        <member name="D:glm.bvec2">
@addtogroup core_vector
@{
2 components vector of boolean.

@see <a href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 4.1.5 Vectors</a></member>
        <member name="T:glm.qualifier">
Qualify GLM types in term of alignment (packed, aligned) and precision in term of ULPs (lowp, mediump, highp)
</member>
        <member name="M:FieaGameEngine.ThrowIfFailed(System.Int32!System.Runtime.CompilerServices.IsLong,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst)">
            <summary>
Custom throw method that allows the user to more descriptively use throws.
</summary>
            <param name="hr">HRESULT from a windows</param>
            <param name="message">User/author written description of the error.</param>
        </member>
        <member name="F:FieaGameEngine.GameException.mHR">
            <summary>
Stored HRESULT when constructed.
</summary>
        </member>
        <member name="M:FieaGameEngine.GameException.whatw">
            <summary>
What's wrong. A message written by the user/author describing the error.
</summary>
            <returns>A wide string with the description of what's wrong.</returns>
        </member>
        <member name="M:FieaGameEngine.GameException.HR">
            <summary>
Return the HRESULT data which provides windows related error/warning information.
</summary>
            <returns>HRESULT data</returns>
        </member>
        <member name="M:FieaGameEngine.GameException.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Constructor will take be populated by a message and an HRESULT
This will provides more information because the HRESULT is a data type that contains windows error/warning information.
</summary>
            <param name="message">A message written by the library author describing the error.</param>
            <param name="hr">A windows data type that provides windows realted error/warning information.</param>
        </member>
        <member name="T:FieaGameEngine.GameException">
            <summary>
This class is wrapper class that provides some additional functionality to the std::runtime_error
</summary>
        </member>
        <!-- Discarding badly formed XML document comment for member 'M:Json.Features.all'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Json.Value'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Json.Value.isValidIndex(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Json.Value.removeMember(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,Json.Value*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Json.Value.isMember(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Json.Reader.parse(std.basic_istream<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Json.Value*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Json.CharReaderBuilder'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Json.op_RightShift(std.basic_istream<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Json.Value*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Json.StreamWriter'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Json.StreamWriterBuilder'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Json.StreamWriterBuilder.settings_'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Json.StyledWriter'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Json.StyledStreamWriter'. -->
    </members>
</doc>